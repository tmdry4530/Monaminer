{
  "address": "0x84C01e7701E0cAEA22aaF84ec50f926ae247115e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mmToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GameManager.PatternType",
          "name": "pattern",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRange",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRange",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "NewRoundStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RewardPoolExhausted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "RoundEnded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIC_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_POOL_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUND_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoAdvanceRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "enum GameManager.PatternType",
              "name": "pattern",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "minRange",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRange",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "rewardPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameManager.Round",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getRoundHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "enum GameManager.PatternType",
              "name": "pattern",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "minRange",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRange",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "rewardPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameManager.Round[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRoundActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mmToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "enum GameManager.PatternType",
          "name": "pattern",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minRange",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rewardPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x218cc1cc458451a3032294919faea414d9f5d86ea40ade961409cdb2a81ea802",
  "receipt": {
    "to": null,
    "from": "0x038F9EFF208F4cefc0a7f856739a3405c419A147",
    "contractAddress": "0x84C01e7701E0cAEA22aaF84ec50f926ae247115e",
    "transactionIndex": 11,
    "gasUsed": "15000000",
    "logsBloom": "0x
    "blockHash": "0x63bb8d0bea1982d94a21a002de53dff787381e51ac2e3da282499bd9a935d084",
    "transactionHash": "0x218cc1cc458451a3032294919faea414d9f5d86ea40ade961409cdb2a81ea802",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 25873494,
        "transactionHash": "0x218cc1cc458451a3032294919faea414d9f5d86ea40ade961409cdb2a81ea802",
        "address": "0x84C01e7701E0cAEA22aaF84ec50f926ae247115e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000038f9eff208f4cefc0a7f856739a3405c419a147"
        ],
        "data": "0x",
        "logIndex": 71,
        "blockHash": "0x63bb8d0bea1982d94a21a002de53dff787381e51ac2e3da282499bd9a935d084"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 25873494,
        "transactionHash": "0x218cc1cc458451a3032294919faea414d9f5d86ea40ade961409cdb2a81ea802",
        "address": "0x84C01e7701E0cAEA22aaF84ec50f926ae247115e",
        "topics": [
          "0x4afb164e8b55fde2bc138f047ca800afc30b7bb1e2cff9764868e5b51fed19b9",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000085a0000000000000000000000000000000000000000000000000000000000000b8c00000000000000000000000000000000000000000000000000000000068720cb4",
        "logIndex": 72,
        "blockHash": "0x63bb8d0bea1982d94a21a002de53dff787381e51ac2e3da282499bd9a935d084"
      }
    ],
    "blockNumber": 25873494,
    "cumulativeGasUsed": "24170378",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe719FA04EEf22ff2F5c9f2f0817BD5E0a750B6F1"
  ],
  "numDeployments": 2,
  "solcInputHash": "e1acaf8e6358f67d9bb17dda7adae5b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mmToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GameManager.PatternType\",\"name\":\"pattern\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"NewRoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RewardPoolExhausted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIC_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_POOL_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAdvanceRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"enum GameManager.PatternType\",\"name\":\"pattern\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct GameManager.Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getRoundHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"enum GameManager.PatternType\",\"name\":\"pattern\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct GameManager.Round[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRoundActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"enum GameManager.PatternType\",\"name\":\"pattern\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameManager.sol\":\"GameManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/GameManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract GameManager is Ownable {\\n    enum PatternType {\\n        EVEN, // \\uc9dd\\uc218\\n        ODD, // \\ud640\\uc218\\n        PRIME, // \\uc18c\\uc218\\n        PI, // \\u03c0 \\uad00\\ub828 (314 \\ud3ec\\ud568/\\ubc30\\uc218)\\n        SQUARE // \\uc644\\uc804\\uc81c\\uacf1\\uc218\\n    }\\n\\n    struct Round {\\n        uint256 roundId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        PatternType pattern;\\n        uint256 minRange;\\n        uint256 maxRange;\\n        bool isActive;\\n        uint256 rewardPool; // \\ub77c\\uc6b4\\ub4dc\\ubcc4 \\ubcf4\\uc0c1 \\ud480 (MM \\ud1a0\\ud070)\\n        uint256 remainingRewards; // \\ub0a8\\uc740 \\ubcf4\\uc0c1 \\uac1c\\uc218\\n    }\\n\\n    uint256 public currentRoundId;\\n    uint256 public constant ROUND_DURATION = 600; // 10\\ubd84\\n    uint256 public constant REWARD_POOL_SIZE = 100 ether; // \\ub77c\\uc6b4\\ub4dc\\ub2f9 100 MM \\ud1a0\\ud070\\n    uint256 public constant BASIC_REWARD = 30 ether; // \\uc131\\uacf5\\ub2f9 30 MM \\ud1a0\\ud070\\n    \\n    IERC20 public mmToken;\\n    mapping(uint256 => Round) public rounds;\\n\\n    event NewRoundStarted(\\n        uint256 indexed roundId,\\n        PatternType pattern,\\n        uint256 minRange,\\n        uint256 maxRange,\\n        uint256 startTime\\n    );\\n\\n    event RoundEnded(uint256 indexed roundId, uint256 endTime, string reason);\\n    event RewardClaimed(uint256 indexed roundId, address indexed player, uint256 amount);\\n    event RewardPoolExhausted(uint256 indexed roundId);\\n\\n    constructor(address _mmToken) Ownable(msg.sender) {\\n        mmToken = IERC20(_mmToken);\\n        _startNewRound();\\n    }\\n\\n    function getCurrentRound() external view returns (Round memory) {\\n        return rounds[currentRoundId];\\n    }\\n\\n    function isRoundActive() external view returns (bool) {\\n        Round memory round = rounds[currentRoundId];\\n        return round.isActive && block.timestamp < round.endTime;\\n    }\\n\\n    function startNewRound() external onlyOwner {\\n        _startNewRound();\\n    }\\n\\n    function _startNewRound() internal {\\n        // \\uc774\\uc804 \\ub77c\\uc6b4\\ub4dc \\uc885\\ub8cc\\n        if (currentRoundId > 0) {\\n            rounds[currentRoundId].isActive = false;\\n            emit RoundEnded(currentRoundId, block.timestamp, \\\"New round started\\\");\\n        }\\n\\n        currentRoundId++;\\n\\n        // \\uc0c8 \\ub77c\\uc6b4\\ub4dc \\ud328\\ud134 \\ubc0f \\ubc94\\uc704 \\uc124\\uc815\\n        (PatternType pattern, uint256 minRange, uint256 maxRange) = _generateRoundParameters();\\n\\n        rounds[currentRoundId] = Round({\\n            roundId: currentRoundId,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + ROUND_DURATION,\\n            pattern: pattern,\\n            minRange: minRange,\\n            maxRange: maxRange,\\n            isActive: true,\\n            rewardPool: REWARD_POOL_SIZE,\\n            remainingRewards: REWARD_POOL_SIZE / BASIC_REWARD\\n        });\\n\\n        emit NewRoundStarted(currentRoundId, pattern, minRange, maxRange, block.timestamp);\\n    }\\n\\n    function _generateRoundParameters() internal view returns (PatternType, uint256, uint256) {\\n        // \\uc758\\uc0ac \\ub79c\\ub364\\uc73c\\ub85c \\ud328\\ud134\\uacfc \\ubc94\\uc704 \\uc0dd\\uc131\\n        uint256 rand = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, currentRoundId)));\\n\\n        // \\uc644\\uc804 \\ub79c\\ub364\\ud55c \\ud328\\ud134 \\uc120\\ud0dd\\n        PatternType pattern = PatternType(rand % 5);\\n\\n        // \\uc644\\uc804 \\ub79c\\ub364\\ud55c \\ubc94\\uc704 \\uc0dd\\uc131\\n        uint256 baseRange = 30000; // \\ucd5c\\uc18c \\uae30\\uc900\\uac12\\n        uint256 maxRangeSpread = 50000; // \\ucd5c\\ub300 \\ubc94\\uc704 \\ud655\\uc0b0\\n\\n        // \\ub79c\\ub364\\ud55c \\ucd5c\\uc18c\\uac12 \\uc0dd\\uc131 (30,000 ~ 70,000)\\n        uint256 minRange = baseRange + (rand % (maxRangeSpread + 1));\\n\\n        // \\ub79c\\ub364\\ud55c \\ubc94\\uc704 \\ud06c\\uae30 \\uc0dd\\uc131 (10,000 ~ 30,000)\\n        uint256 rangeSize = 10000 + ((rand >> 8) % 20001);\\n        uint256 maxRange = minRange + rangeSize;\\n\\n        return (pattern, minRange, maxRange);\\n    }\\n\\n    function autoAdvanceRound() external {\\n        require(\\n            block.timestamp >= rounds[currentRoundId].endTime || rounds[currentRoundId].remainingRewards == 0,\\n            \\\"Round still active and rewards available\\\"\\n        );\\n        \\n        string memory reason = rounds[currentRoundId].remainingRewards == 0 \\n            ? \\\"Reward pool exhausted\\\" \\n            : \\\"Time expired\\\";\\n            \\n        rounds[currentRoundId].isActive = false;\\n        emit RoundEnded(currentRoundId, block.timestamp, reason);\\n        \\n        _startNewRound();\\n    }\\n    \\n    // \\ubcf4\\uc0c1 \\uc9c0\\uae09 \\ud568\\uc218 (MiningEngine\\uc5d0\\uc11c \\ud638\\ucd9c)\\n    function claimReward(address player) external returns (bool) {\\n        Round storage round = rounds[currentRoundId];\\n        require(round.isActive, \\\"Round not active\\\");\\n        require(round.remainingRewards > 0, \\\"No rewards remaining\\\");\\n        \\n        // MM \\ud1a0\\ud070 \\uc804\\uc1a1\\n        require(mmToken.transfer(player, BASIC_REWARD), \\\"Token transfer failed\\\");\\n        \\n        round.remainingRewards--;\\n        round.rewardPool -= BASIC_REWARD;\\n        \\n        emit RewardClaimed(currentRoundId, player, BASIC_REWARD);\\n        \\n        // \\ubcf4\\uc0c1\\ud480\\uc774 \\uc18c\\uc9c4\\ub418\\uba74 \\ub77c\\uc6b4\\ub4dc \\uc885\\ub8cc\\n        if (round.remainingRewards == 0) {\\n            emit RewardPoolExhausted(currentRoundId);\\n            round.isActive = false;\\n            emit RoundEnded(currentRoundId, block.timestamp, \\\"Reward pool exhausted\\\");\\n            _startNewRound();\\n        }\\n        \\n        return true;\\n    }\\n\\n    function getRoundHistory(uint256 count) external view returns (Round[] memory) {\\n        uint256 startId = currentRoundId > count ? currentRoundId - count + 1 : 1;\\n        uint256 actualCount = currentRoundId - startId + 1;\\n\\n        Round[] memory history = new Round[](actualCount);\\n        for (uint256 i = 0; i < actualCount; i++) {\\n            history[i] = rounds[startId + i];\\n        }\\n\\n        return history;\\n    }\\n}\\n\",\"keccak256\":\"0x3a899c315f3498445d0dedb467832817cc50de1db6bcba50488481c3d9f32437\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200163e3803806200163e8339810160408190526200003491620003f4565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000668162000093565b50600280546001600160a01b0319166001600160a01b0383161790556200008c620000e3565b506200050d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001541562000171576001805460009081526003602052604090819020600601805460ff19169055905490517f7ce3424f0eb4ac7d22b1e4bb77a1da8fa395255957220a4cade46e64b8a214739062000168904281526040602082018190526011908201527013995dc81c9bdd5b99081cdd185c9d1959607a1b606082015260800190565b60405180910390a25b6001805490600062000183836200043c565b909155506000905080806200019762000313565b925092509250604051806101200160405280600154815260200142815260200161025842620001c7919062000458565b8152602001846004811115620001e157620001e162000474565b815260200183815260200182815260200160011515815260200168056bc75e2d6310000081526020016801a055690d9db8000068056bc75e2d631000006200022a9190620004a0565b9052600180546000908152600360208181526040928390208551815590850151818501559184015160028301556060840151908201805492939192909160ff199091169083600481111562000283576200028362000474565b02179055506080820151600482015560a0820151600582015560c082015160068201805460ff191691151591909117905560e08201516007820155610100909101516008909101556001546040517f4afb164e8b55fde2bc138f047ca800afc30b7bb1e2cff9764868e5b51fed19b99062000306908690869086904290620004b7565b60405180910390a2505050565b600080600080424460015460405160200162000342939291909283526020830191909152604082015260600190565b60408051601f198184030181529190528051602090910120905060006200036b600583620004f6565b60048111156200037f576200037f62000474565b905061753061c35060006200039682600162000458565b620003a29086620004f6565b620003ae908462000458565b90506000620003c4614e21600888901c620004f6565b620003d29061271062000458565b90506000620003e2828462000458565b959a9299509497509095505050505050565b6000602082840312156200040757600080fd5b81516001600160a01b03811681146200041f57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001820162000451576200045162000426565b5060010190565b808201808211156200046e576200046e62000426565b92915050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082620004b257620004b26200048a565b500490565b6080810160058610620004da57634e487b7160e01b600052602160045260246000fd5b9481526020810193909352604083019190915260609091015290565b6000826200050857620005086200048a565b500690565b611121806200051d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639cbe5efd11610097578063bd85948c11610066578063bd85948c14610244578063d279c1911461024c578063e84e0f7d1461025f578063f2fde38b1461026757600080fd5b80639cbe5efd14610203578063a32bf5971461020c578063a890dd9014610221578063b2aabcfa1461023457600080fd5b806386bc006e116100d357806386bc006e146101385780638c65c81f146101485780638da5cb5b146101be5780639506a4ec146101e357600080fd5b806345945a45146100fa5780636641ea0814610117578063715018a61461012e575b600080fd5b61010261027a565b60405190151581526020015b60405180910390f35b61012061025881565b60405190815260200161010e565b610136610349565b005b6101206801a055690d9db8000081565b6101a9610156366004610ddb565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546006860154600787015460089097015495979496949560ff9485169593949293919092169189565b60405161010e99989796959493929190610e2c565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b6101f66101f1366004610ddb565b61035d565b60405161010e9190610ee0565b61012060015481565b6102146104fc565b60405161010e9190610f2f565b6002546101cb906001600160a01b031681565b61012068056bc75e2d6310000081565b6101366105ab565b61010261025a366004610f44565b6105bb565b610136610869565b610136610275366004610f44565b6109d7565b600080600360006001548152602001908152602001600020604051806101200160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156102e0576102e0610df4565b60048111156102f1576102f1610df4565b81526004820154602082015260058201546040820152600682015460ff16151560608201526007820154608082015260089091015460a09091015260c081015190915080156103435750806040015142105b91505090565b610351610a12565b61035b6000610a3f565b565b60606000826001541161037157600161038a565b8260015461037f9190610f8a565b61038a906001610f9d565b905060008160015461039c9190610f8a565b6103a7906001610f9d565b905060008167ffffffffffffffff8111156103c4576103c4610fb0565b6040519080825280602002602001820160405280156103fd57816020015b6103ea610d7c565b8152602001906001900390816103e25790505b50905060005b828110156104f357600360006104198387610f9d565b8152602001908152602001600020604051806101200160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561047557610475610df4565b600481111561048657610486610df4565b81526004820154602082015260058201546040820152600682015460ff16151560608201526007820154608082015260089091015460a09091015282518390839081106104d5576104d5610fc6565b602002602001018190525080806104eb90610fdc565b915050610403565b50949350505050565b610504610d7c565b60018054600090815260036020818152604092839020835161012081018552815481529481015491850191909152600281015492840192909252810154606083019060ff16600481111561055a5761055a610df4565b600481111561056b5761056b610df4565b81526004820154602082015260058201546040820152600682015460ff16151560608201526007820154608082015260089091015460a090910152919050565b6105b3610a12565b61035b610a8f565b6001546000908152600360205260408120600681015460ff166106185760405162461bcd60e51b815260206004820152601060248201526f526f756e64206e6f742061637469766560801b60448201526064015b60405180910390fd5b60008160080154116106635760405162461bcd60e51b81526020600482015260146024820152734e6f20726577617264732072656d61696e696e6760601b604482015260640161060f565b60025460405163a9059cbb60e01b81526001600160a01b0385811660048301526801a055690d9db8000060248301529091169063a9059cbb906044016020604051808303816000875af11580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190610ff5565b6107265760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015260640161060f565b60088101805490600061073883611017565b91905055506801a055690d9db8000081600701600082825461075a9190610f8a565b90915550506001546040516801a055690d9db8000081526001600160a01b03851691907f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb79060200160405180910390a38060080154600003610860576001546040517f6d4d3c6a973c95cd95e10274247267acd9fa542fcd2ac3a018630feeeec90d2a90600090a260068101805460ff191690556001546040517f7ce3424f0eb4ac7d22b1e4bb77a1da8fa395255957220a4cade46e64b8a2147390610850904281526040602082018190526015908201527414995dd85c99081c1bdbdb08195e1a185d5cdd1959605a1b606082015260800190565b60405180910390a2610860610a8f565b50600192915050565b6001546000908152600360205260409020600201544210158061089e5750600154600090815260036020526040902060080154155b6108fb5760405162461bcd60e51b815260206004820152602860248201527f526f756e64207374696c6c2061637469766520616e64207265776172647320616044820152677661696c61626c6560c01b606482015260840161060f565b6001546000908152600360205260408120600801541561093f576040518060400160405280600c81526020016b151a5b5948195e1c1a5c995960a21b81525061096e565b6040518060400160405280601581526020017414995dd85c99081c1bdbdb08195e1a185d5cdd1959605a1b8152505b6001805460009081526003602052604090819020600601805460ff1916905590549051919250907f7ce3424f0eb4ac7d22b1e4bb77a1da8fa395255957220a4cade46e64b8a21473906109c4904290859061102e565b60405180910390a26109d4610a8f565b50565b6109df610a12565b6001600160a01b038116610a0957604051631e4fbdf760e01b81526000600482015260240161060f565b6109d481610a3f565b6000546001600160a01b0316331461035b5760405163118cdaa760e01b815233600482015260240161060f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60015415610b1b576001805460009081526003602052604090819020600601805460ff19169055905490517f7ce3424f0eb4ac7d22b1e4bb77a1da8fa395255957220a4cade46e64b8a2147390610b12904281526040602082018190526011908201527013995dc81c9bdd5b99081cdd185c9d1959607a1b606082015260800190565b60405180910390a25b60018054906000610b2b83610fdc565b91905055506000806000610b3d610cad565b925092509250604051806101200160405280600154815260200142815260200161025842610b6b9190610f9d565b8152602001846004811115610b8257610b82610df4565b815260200183815260200182815260200160011515815260200168056bc75e2d6310000081526020016801a055690d9db8000068056bc75e2d63100000610bc9919061109a565b9052600180546000908152600360208181526040928390208551815590850151818501559184015160028301556060840151908201805492939192909160ff1990911690836004811115610c1f57610c1f610df4565b02179055506080820151600482015560a0820151600582015560c082015160068201805460ff191691151591909117905560e08201516007820155610100909101516008909101556001546040517f4afb164e8b55fde2bc138f047ca800afc30b7bb1e2cff9764868e5b51fed19b990610ca09086908690869042906110ae565b60405180910390a2505050565b6000806000804244600154604051602001610cdb939291909283526020830191909152604082015260600190565b60408051601f19818403018152919052805160209091012090506000610d026005836110d7565b6004811115610d1357610d13610df4565b905061753061c3506000610d28826001610f9d565b610d3290866110d7565b610d3c9084610f9d565b90506000610d50614e21600888901c6110d7565b610d5c90612710610f9d565b90506000610d6a8284610f9d565b959a9299509497509095505050505050565b60405180610120016040528060008152602001600081526020016000815260200160006004811115610db057610db0610df4565b8152602001600081526020016000815260200160001515815260200160008152602001600081525090565b600060208284031215610ded57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60058110610e2857634e487b7160e01b600052602160045260246000fd5b9052565b89815260208101899052604081018890526101208101610e4f6060830189610e0a565b608082019690965260a081019490945291151560c084015260e083015261010090910152949350505050565b8051825260208101516020830152604081015160408301526060810151610ea56060840182610e0a565b506080810151608083015260a081015160a083015260c0810151151560c083015260e081015160e08301526101008082015181840152505050565b6020808252825182820181905260009190848201906040850190845b81811015610f2357610f0f838551610e7b565b928401926101209290920191600101610efc565b50909695505050505050565b6101208101610f3e8284610e7b565b92915050565b600060208284031215610f5657600080fd5b81356001600160a01b0381168114610f6d57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f3e57610f3e610f74565b80820180821115610f3e57610f3e610f74565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610fee57610fee610f74565b5060010190565b60006020828403121561100757600080fd5b81518015158114610f6d57600080fd5b60008161102657611026610f74565b506000190190565b82815260006020604081840152835180604085015260005b8181101561106257858101830151858201606001528201611046565b506000606082860101526060601f19601f830116850101925050509392505050565b634e487b7160e01b600052601260045260246000fd5b6000826110a9576110a9611084565b500490565b608081016110bc8287610e0a565b84602083015283604083015282606083015295945050505050565b6000826110e6576110e6611084565b50069056fea26469706673582212203dc68112b6f84802efa5b9f29e0e6717849a58b4ace637038679d4214da99fa664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80639cbe5efd11610097578063bd85948c11610066578063bd85948c14610244578063d279c1911461024c578063e84e0f7d1461025f578063f2fde38b1461026757600080fd5b80639cbe5efd14610203578063a32bf5971461020c578063a890dd9014610221578063b2aabcfa1461023457600080fd5b806386bc006e116100d357806386bc006e146101385780638c65c81f146101485780638da5cb5b146101be5780639506a4ec146101e357600080fd5b806345945a45146100fa5780636641ea0814610117578063715018a61461012e575b600080fd5b61010261027a565b60405190151581526020015b60405180910390f35b61012061025881565b60405190815260200161010e565b610136610349565b005b6101206801a055690d9db8000081565b6101a9610156366004610ddb565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546006860154600787015460089097015495979496949560ff9485169593949293919092169189565b60405161010e99989796959493929190610e2c565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b6101f66101f1366004610ddb565b61035d565b60405161010e9190610ee0565b61012060015481565b6102146104fc565b60405161010e9190610f2f565b6002546101cb906001600160a01b031681565b61012068056bc75e2d6310000081565b6101366105ab565b61010261025a366004610f44565b6105bb565b610136610869565b610136610275366004610f44565b6109d7565b600080600360006001548152602001908152602001600020604051806101200160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156102e0576102e0610df4565b60048111156102f1576102f1610df4565b81526004820154602082015260058201546040820152600682015460ff16151560608201526007820154608082015260089091015460a09091015260c081015190915080156103435750806040015142105b91505090565b610351610a12565b61035b6000610a3f565b565b60606000826001541161037157600161038a565b8260015461037f9190610f8a565b61038a906001610f9d565b905060008160015461039c9190610f8a565b6103a7906001610f9d565b905060008167ffffffffffffffff8111156103c4576103c4610fb0565b6040519080825280602002602001820160405280156103fd57816020015b6103ea610d7c565b8152602001906001900390816103e25790505b50905060005b828110156104f357600360006104198387610f9d565b8152602001908152602001600020604051806101200160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561047557610475610df4565b600481111561048657610486610df4565b81526004820154602082015260058201546040820152600682015460ff16151560608201526007820154608082015260089091015460a09091015282518390839081106104d5576104d5610fc6565b602002602001018190525080806104eb90610fdc565b915050610403565b50949350505050565b610504610d7c565b60018054600090815260036020818152604092839020835161012081018552815481529481015491850191909152600281015492840192909252810154606083019060ff16600481111561055a5761055a610df4565b600481111561056b5761056b610df4565b81526004820154602082015260058201546040820152600682015460ff16151560608201526007820154608082015260089091015460a090910152919050565b6105b3610a12565b61035b610a8f565b6001546000908152600360205260408120600681015460ff166106185760405162461bcd60e51b815260206004820152601060248201526f526f756e64206e6f742061637469766560801b60448201526064015b60405180910390fd5b60008160080154116106635760405162461bcd60e51b81526020600482015260146024820152734e6f20726577617264732072656d61696e696e6760601b604482015260640161060f565b60025460405163a9059cbb60e01b81526001600160a01b0385811660048301526801a055690d9db8000060248301529091169063a9059cbb906044016020604051808303816000875af11580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190610ff5565b6107265760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015260640161060f565b60088101805490600061073883611017565b91905055506801a055690d9db8000081600701600082825461075a9190610f8a565b90915550506001546040516801a055690d9db8000081526001600160a01b03851691907f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb79060200160405180910390a38060080154600003610860576001546040517f6d4d3c6a973c95cd95e10274247267acd9fa542fcd2ac3a018630feeeec90d2a90600090a260068101805460ff191690556001546040517f7ce3424f0eb4ac7d22b1e4bb77a1da8fa395255957220a4cade46e64b8a2147390610850904281526040602082018190526015908201527414995dd85c99081c1bdbdb08195e1a185d5cdd1959605a1b606082015260800190565b60405180910390a2610860610a8f565b50600192915050565b6001546000908152600360205260409020600201544210158061089e5750600154600090815260036020526040902060080154155b6108fb5760405162461bcd60e51b815260206004820152602860248201527f526f756e64207374696c6c2061637469766520616e64207265776172647320616044820152677661696c61626c6560c01b606482015260840161060f565b6001546000908152600360205260408120600801541561093f576040518060400160405280600c81526020016b151a5b5948195e1c1a5c995960a21b81525061096e565b6040518060400160405280601581526020017414995dd85c99081c1bdbdb08195e1a185d5cdd1959605a1b8152505b6001805460009081526003602052604090819020600601805460ff1916905590549051919250907f7ce3424f0eb4ac7d22b1e4bb77a1da8fa395255957220a4cade46e64b8a21473906109c4904290859061102e565b60405180910390a26109d4610a8f565b50565b6109df610a12565b6001600160a01b038116610a0957604051631e4fbdf760e01b81526000600482015260240161060f565b6109d481610a3f565b6000546001600160a01b0316331461035b5760405163118cdaa760e01b815233600482015260240161060f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60015415610b1b576001805460009081526003602052604090819020600601805460ff19169055905490517f7ce3424f0eb4ac7d22b1e4bb77a1da8fa395255957220a4cade46e64b8a2147390610b12904281526040602082018190526011908201527013995dc81c9bdd5b99081cdd185c9d1959607a1b606082015260800190565b60405180910390a25b60018054906000610b2b83610fdc565b91905055506000806000610b3d610cad565b925092509250604051806101200160405280600154815260200142815260200161025842610b6b9190610f9d565b8152602001846004811115610b8257610b82610df4565b815260200183815260200182815260200160011515815260200168056bc75e2d6310000081526020016801a055690d9db8000068056bc75e2d63100000610bc9919061109a565b9052600180546000908152600360208181526040928390208551815590850151818501559184015160028301556060840151908201805492939192909160ff1990911690836004811115610c1f57610c1f610df4565b02179055506080820151600482015560a0820151600582015560c082015160068201805460ff191691151591909117905560e08201516007820155610100909101516008909101556001546040517f4afb164e8b55fde2bc138f047ca800afc30b7bb1e2cff9764868e5b51fed19b990610ca09086908690869042906110ae565b60405180910390a2505050565b6000806000804244600154604051602001610cdb939291909283526020830191909152604082015260600190565b60408051601f19818403018152919052805160209091012090506000610d026005836110d7565b6004811115610d1357610d13610df4565b905061753061c3506000610d28826001610f9d565b610d3290866110d7565b610d3c9084610f9d565b90506000610d50614e21600888901c6110d7565b610d5c90612710610f9d565b90506000610d6a8284610f9d565b959a9299509497509095505050505050565b60405180610120016040528060008152602001600081526020016000815260200160006004811115610db057610db0610df4565b8152602001600081526020016000815260200160001515815260200160008152602001600081525090565b600060208284031215610ded57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60058110610e2857634e487b7160e01b600052602160045260246000fd5b9052565b89815260208101899052604081018890526101208101610e4f6060830189610e0a565b608082019690965260a081019490945291151560c084015260e083015261010090910152949350505050565b8051825260208101516020830152604081015160408301526060810151610ea56060840182610e0a565b506080810151608083015260a081015160a083015260c0810151151560c083015260e081015160e08301526101008082015181840152505050565b6020808252825182820181905260009190848201906040850190845b81811015610f2357610f0f838551610e7b565b928401926101209290920191600101610efc565b50909695505050505050565b6101208101610f3e8284610e7b565b92915050565b600060208284031215610f5657600080fd5b81356001600160a01b0381168114610f6d57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f3e57610f3e610f74565b80820180821115610f3e57610f3e610f74565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610fee57610fee610f74565b5060010190565b60006020828403121561100757600080fd5b81518015158114610f6d57600080fd5b60008161102657611026610f74565b506000190190565b82815260006020604081840152835180604085015260005b8181101561106257858101830151858201606001528201611046565b506000606082860101526060601f19601f830116850101925050509392505050565b634e487b7160e01b600052601260045260246000fd5b6000826110a9576110a9611084565b500490565b608081016110bc8287610e0a565b84602083015283604083015282606083015295945050505050565b6000826110e6576110e6611084565b50069056fea26469706673582212203dc68112b6f84802efa5b9f29e0e6717849a58b4ace637038679d4214da99fa664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/GameManager.sol:GameManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4125,
        "contract": "contracts/GameManager.sol:GameManager",
        "label": "currentRoundId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4137,
        "contract": "contracts/GameManager.sol:GameManager",
        "label": "mmToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)362"
      },
      {
        "astId": 4142,
        "contract": "contracts/GameManager.sol:GameManager",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Round)4123_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)362": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(PatternType)4103": {
        "encoding": "inplace",
        "label": "enum GameManager.PatternType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Round)4123_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GameManager.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)4123_storage"
      },
      "t_struct(Round)4123_storage": {
        "encoding": "inplace",
        "label": "struct GameManager.Round",
        "members": [
          {
            "astId": 4105,
            "contract": "contracts/GameManager.sol:GameManager",
            "label": "roundId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4107,
            "contract": "contracts/GameManager.sol:GameManager",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4109,
            "contract": "contracts/GameManager.sol:GameManager",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4112,
            "contract": "contracts/GameManager.sol:GameManager",
            "label": "pattern",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(PatternType)4103"
          },
          {
            "astId": 4114,
            "contract": "contracts/GameManager.sol:GameManager",
            "label": "minRange",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4116,
            "contract": "contracts/GameManager.sol:GameManager",
            "label": "maxRange",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4118,
            "contract": "contracts/GameManager.sol:GameManager",
            "label": "isActive",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4120,
            "contract": "contracts/GameManager.sol:GameManager",
            "label": "rewardPool",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4122,
            "contract": "contracts/GameManager.sol:GameManager",
            "label": "remainingRewards",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}