{
  "address": "0xbEdf47637e21cDaf9F43a5E38158E321f0E5505e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minerNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchSuccesses",
          "type": "uint256"
        }
      ],
      "name": "AutoMiningBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "AutoMiningStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "AutoMiningStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchAttempts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchSuccesses",
          "type": "uint256"
        }
      ],
      "name": "BatchMiningCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAttempts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSuccesses",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "MiningSessionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "nftIds",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "MiningSessionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MiningSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MINING_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINING_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TPS_PER_MINER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeSessions",
      "outputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalAttempts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSuccesses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMiningTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "autoMining",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "nextAutoMiningTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "autoMiningEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "canExecuteAutoMining",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "executeAutoMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "forceEndSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameManager",
      "outputs": [
        {
          "internalType": "contract GameManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getAutoMiningStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAutoMining",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "nextMiningTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cooldownRemaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getMiningHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "randomNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct MiningEngine.MiningAttempt[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getMiningStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "attempts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTPS",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "remainingTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getRecentSuccesses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "randomNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct MiningEngine.MiningAttempt[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minerNFT",
      "outputs": [
        {
          "internalType": "contract MinerNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "miningHistory",
      "outputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performBatchMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerTotalSuccesses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "contract RewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameManager",
          "type": "address"
        }
      ],
      "name": "setGameManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minerNFT",
          "type": "address"
        }
      ],
      "name": "setMinerNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardManager",
          "type": "address"
        }
      ],
      "name": "setRewardManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startAutoMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "nftIds",
          "type": "uint256[3]"
        }
      ],
      "name": "startMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopAutoMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x02b4fa4f92e1e463759200cad49cf5c9b10b4fde213934c5e609bad4933d35d0",
  "receipt": {
    "to": null,
    "from": "0x038F9EFF208F4cefc0a7f856739a3405c419A147",
    "contractAddress": "0xbEdf47637e21cDaf9F43a5E38158E321f0E5505e",
    "transactionIndex": 5,
    "gasUsed": "2486282",
    "logsBloom": "0x
    "blockHash": "0xe060c86545655eccd5aeee1b08dbcdba46084d1daec0235e0deb04014e1a726b",
    "transactionHash": "0x02b4fa4f92e1e463759200cad49cf5c9b10b4fde213934c5e609bad4933d35d0",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 25874653,
        "transactionHash": "0x02b4fa4f92e1e463759200cad49cf5c9b10b4fde213934c5e609bad4933d35d0",
        "address": "0xbEdf47637e21cDaf9F43a5E38158E321f0E5505e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000038f9eff208f4cefc0a7f856739a3405c419a147"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xe060c86545655eccd5aeee1b08dbcdba46084d1daec0235e0deb04014e1a726b"
      }
    ],
    "blockNumber": 25874653,
    "cumulativeGasUsed": "3029549",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x84C01e7701E0cAEA22aaF84ec50f926ae247115e",
    "0xE21001E072472642946B3Cc2Daa71f602EF92234",
    "0xE0F15D16E0666bC625b938Cd48a636e0506e5A7A"
  ],
  "numDeployments": 4,
  "solcInputHash": "8f10f76b15ee839fe87cae778b661d96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minerNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchSuccesses\",\"type\":\"uint256\"}],\"name\":\"AutoMiningBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"AutoMiningStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"AutoMiningStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchAttempts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchSuccesses\",\"type\":\"uint256\"}],\"name\":\"BatchMiningCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAttempts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSuccesses\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"MiningSessionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"nftIds\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"MiningSessionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MiningSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINING_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TPS_PER_MINER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeSessions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalAttempts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSuccesses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMiningTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoMining\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nextAutoMiningTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoMiningEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"canExecuteAutoMining\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"executeAutoMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"forceEndSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameManager\",\"outputs\":[{\"internalType\":\"contract GameManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getAutoMiningStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAutoMining\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nextMiningTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getMiningHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MiningEngine.MiningAttempt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getMiningStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"attempts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTPS\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getRecentSuccesses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MiningEngine.MiningAttempt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerNFT\",\"outputs\":[{\"internalType\":\"contract MinerNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miningHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performBatchMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerTotalSuccesses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract RewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameManager\",\"type\":\"address\"}],\"name\":\"setGameManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minerNFT\",\"type\":\"address\"}],\"name\":\"setMinerNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"name\":\"setRewardManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAutoMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"nftIds\",\"type\":\"uint256[3]\"}],\"name\":\"startMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAutoMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MiningEngine.sol\":\"MiningEngine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36797469c391ea5ba27408e6ca8adf0824ba6f3adea9c139be18bd6f63232c16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/GameManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract GameManager is Ownable {\\n    enum PatternType {\\n        EVEN, // \\uc9dd\\uc218\\n        ODD, // \\ud640\\uc218\\n        PRIME, // \\uc18c\\uc218\\n        PI, // \\u03c0 \\uad00\\ub828 (314 \\ud3ec\\ud568/\\ubc30\\uc218)\\n        SQUARE // \\uc644\\uc804\\uc81c\\uacf1\\uc218\\n    }\\n\\n    struct Round {\\n        uint256 roundId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        PatternType pattern;\\n        uint256 minRange;\\n        uint256 maxRange;\\n        bool isActive;\\n        uint256 rewardPool; // \\ub77c\\uc6b4\\ub4dc\\ubcc4 \\ubcf4\\uc0c1 \\ud480 (MM \\ud1a0\\ud070)\\n        uint256 remainingRewards; // \\ub0a8\\uc740 \\ubcf4\\uc0c1 \\uac1c\\uc218\\n    }\\n\\n    uint256 public currentRoundId;\\n    uint256 public constant ROUND_DURATION = 600; // 10\\ubd84\\n    uint256 public constant REWARD_POOL_SIZE = 100 ether; // \\ub77c\\uc6b4\\ub4dc\\ub2f9 100 MM \\ud1a0\\ud070\\n    uint256 public constant BASIC_REWARD = 30 ether; // \\uc131\\uacf5\\ub2f9 30 MM \\ud1a0\\ud070\\n    \\n    IERC20 public mmToken;\\n    mapping(uint256 => Round) public rounds;\\n\\n    event NewRoundStarted(\\n        uint256 indexed roundId,\\n        PatternType pattern,\\n        uint256 minRange,\\n        uint256 maxRange,\\n        uint256 startTime\\n    );\\n\\n    event RoundEnded(uint256 indexed roundId, uint256 endTime, string reason);\\n    event RewardClaimed(uint256 indexed roundId, address indexed player, uint256 amount);\\n    event RewardPoolExhausted(uint256 indexed roundId);\\n\\n    constructor(address _mmToken) Ownable(msg.sender) {\\n        mmToken = IERC20(_mmToken);\\n        _startNewRound();\\n    }\\n\\n    function getCurrentRound() external view returns (Round memory) {\\n        return rounds[currentRoundId];\\n    }\\n\\n    function isRoundActive() external view returns (bool) {\\n        Round memory round = rounds[currentRoundId];\\n        return round.isActive && block.timestamp < round.endTime;\\n    }\\n\\n    function startNewRound() external onlyOwner {\\n        _startNewRound();\\n    }\\n\\n    function _startNewRound() internal {\\n        // \\uc774\\uc804 \\ub77c\\uc6b4\\ub4dc \\uc885\\ub8cc\\n        if (currentRoundId > 0) {\\n            rounds[currentRoundId].isActive = false;\\n            emit RoundEnded(currentRoundId, block.timestamp, \\\"New round started\\\");\\n        }\\n\\n        currentRoundId++;\\n\\n        // \\uc0c8 \\ub77c\\uc6b4\\ub4dc \\ud328\\ud134 \\ubc0f \\ubc94\\uc704 \\uc124\\uc815\\n        (PatternType pattern, uint256 minRange, uint256 maxRange) = _generateRoundParameters();\\n\\n        rounds[currentRoundId] = Round({\\n            roundId: currentRoundId,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + ROUND_DURATION,\\n            pattern: pattern,\\n            minRange: minRange,\\n            maxRange: maxRange,\\n            isActive: true,\\n            rewardPool: REWARD_POOL_SIZE,\\n            remainingRewards: REWARD_POOL_SIZE / BASIC_REWARD\\n        });\\n\\n        emit NewRoundStarted(currentRoundId, pattern, minRange, maxRange, block.timestamp);\\n    }\\n\\n    function _generateRoundParameters() internal view returns (PatternType, uint256, uint256) {\\n        // \\uc758\\uc0ac \\ub79c\\ub364\\uc73c\\ub85c \\ud328\\ud134\\uacfc \\ubc94\\uc704 \\uc0dd\\uc131\\n        uint256 rand = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, currentRoundId)));\\n\\n        // \\uc644\\uc804 \\ub79c\\ub364\\ud55c \\ud328\\ud134 \\uc120\\ud0dd\\n        PatternType pattern = PatternType(rand % 5);\\n\\n        // \\uc644\\uc804 \\ub79c\\ub364\\ud55c \\ubc94\\uc704 \\uc0dd\\uc131\\n        uint256 baseRange = 30000; // \\ucd5c\\uc18c \\uae30\\uc900\\uac12\\n        uint256 maxRangeSpread = 50000; // \\ucd5c\\ub300 \\ubc94\\uc704 \\ud655\\uc0b0\\n\\n        // \\ub79c\\ub364\\ud55c \\ucd5c\\uc18c\\uac12 \\uc0dd\\uc131 (30,000 ~ 70,000)\\n        uint256 minRange = baseRange + (rand % (maxRangeSpread + 1));\\n\\n        // \\ub79c\\ub364\\ud55c \\ubc94\\uc704 \\ud06c\\uae30 \\uc0dd\\uc131 (10,000 ~ 30,000)\\n        uint256 rangeSize = 10000 + ((rand >> 8) % 20001);\\n        uint256 maxRange = minRange + rangeSize;\\n\\n        return (pattern, minRange, maxRange);\\n    }\\n\\n    function autoAdvanceRound() external {\\n        require(\\n            block.timestamp >= rounds[currentRoundId].endTime || rounds[currentRoundId].remainingRewards == 0,\\n            \\\"Round still active and rewards available\\\"\\n        );\\n        \\n        string memory reason = rounds[currentRoundId].remainingRewards == 0 \\n            ? \\\"Reward pool exhausted\\\" \\n            : \\\"Time expired\\\";\\n            \\n        rounds[currentRoundId].isActive = false;\\n        emit RoundEnded(currentRoundId, block.timestamp, reason);\\n        \\n        _startNewRound();\\n    }\\n    \\n    // \\ubcf4\\uc0c1 \\uc9c0\\uae09 \\ud568\\uc218 (MiningEngine\\uc5d0\\uc11c \\ud638\\ucd9c)\\n    function claimReward(address player) external returns (bool) {\\n        Round storage round = rounds[currentRoundId];\\n        require(round.isActive, \\\"Round not active\\\");\\n        require(round.remainingRewards > 0, \\\"No rewards remaining\\\");\\n        \\n        // MM \\ud1a0\\ud070 \\uc804\\uc1a1\\n        require(mmToken.transfer(player, BASIC_REWARD), \\\"Token transfer failed\\\");\\n        \\n        round.remainingRewards--;\\n        round.rewardPool -= BASIC_REWARD;\\n        \\n        emit RewardClaimed(currentRoundId, player, BASIC_REWARD);\\n        \\n        // \\ubcf4\\uc0c1\\ud480\\uc774 \\uc18c\\uc9c4\\ub418\\uba74 \\ub77c\\uc6b4\\ub4dc \\uc885\\ub8cc\\n        if (round.remainingRewards == 0) {\\n            emit RewardPoolExhausted(currentRoundId);\\n            round.isActive = false;\\n            emit RoundEnded(currentRoundId, block.timestamp, \\\"Reward pool exhausted\\\");\\n            _startNewRound();\\n        }\\n        \\n        return true;\\n    }\\n\\n    function getRoundHistory(uint256 count) external view returns (Round[] memory) {\\n        uint256 startId = currentRoundId > count ? currentRoundId - count + 1 : 1;\\n        uint256 actualCount = currentRoundId - startId + 1;\\n\\n        Round[] memory history = new Round[](actualCount);\\n        for (uint256 i = 0; i < actualCount; i++) {\\n            history[i] = rounds[startId + i];\\n        }\\n\\n        return history;\\n    }\\n}\\n\",\"keccak256\":\"0x3a899c315f3498445d0dedb467832817cc50de1db6bcba50488481c3d9f32437\",\"license\":\"MIT\"},\"contracts/MinerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./GameManager.sol\\\";\\n\\ncontract MinerNFT is ERC721, ERC721Enumerable, Ownable {\\n    enum MinerType {\\n        EVEN_BLASTER, // EvenBlaster\\n        PRIME_SNIPER, // PrimeSniper\\n        BALANCED_SCAN, // BalancedScan\\n        PI_SNIPER, // PiSniper\\n        SQUARE_SEEKER // SquareSeeker\\n    }\\n\\n    struct MinerStats {\\n        MinerType minerType;\\n        uint256 minRange;\\n        uint256 maxRange;\\n        GameManager.PatternType specialization;\\n        uint256 baseSuccessRate; // \\uc131\\uacf5\\ub960 (10000 = 100%)\\n        string name;\\n    }\\n\\n    uint256 private _nextTokenId = 1;\\n    mapping(uint256 => MinerStats) public minerStats;\\n\\n    // \\ucc44\\uad74\\uae30\\ubcc4 \\uc124\\uc815 (PRD \\uae30\\uc900)\\n    mapping(MinerType => MinerStats) public minerConfig;\\n    \\n    // \\ubbfc\\ud305 \\uad8c\\ud55c \\uad00\\ub9ac\\n    mapping(address => bool) public authorizedMinters;\\n\\n    event MinerMinted(address indexed to, uint256 indexed tokenId, MinerType minerType, string name);\\n    event MinterAuthorized(address indexed minter, bool authorized);\\n    \\n    modifier onlyAuthorizedMinter() {\\n        require(authorizedMinters[msg.sender] || msg.sender == owner(), \\\"Not authorized to mint\\\");\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"Monaminer NFT\\\", \\\"MINER\\\") Ownable(msg.sender) {\\n        _initializeMinerConfigs();\\n    }\\n\\n    function _initializeMinerConfigs() private {\\n        // EvenBlaster NFT\\n        minerConfig[MinerType.EVEN_BLASTER] = MinerStats({\\n            minerType: MinerType.EVEN_BLASTER,\\n            minRange: 40000,\\n            maxRange: 60000,\\n            specialization: GameManager.PatternType.EVEN,\\n            baseSuccessRate: 15, // 0.015%\\n            name: \\\"EvenBlaster\\\"\\n        });\\n\\n        // PrimeSniper NFT\\n        minerConfig[MinerType.PRIME_SNIPER] = MinerStats({\\n            minerType: MinerType.PRIME_SNIPER,\\n            minRange: 74000,\\n            maxRange: 80000,\\n            specialization: GameManager.PatternType.PRIME,\\n            baseSuccessRate: 12, // 0.012%\\n            name: \\\"PrimeSniper\\\"\\n        });\\n\\n        // BalancedScan NFT (\\ubc94\\uc6a9)\\n        minerConfig[MinerType.BALANCED_SCAN] = MinerStats({\\n            minerType: MinerType.BALANCED_SCAN,\\n            minRange: 50000,\\n            maxRange: 70000,\\n            specialization: GameManager.PatternType.EVEN, // \\ubaa8\\ub4e0 \\ud328\\ud134\\uc5d0 \\ub300\\uc751\\n            baseSuccessRate: 8, // 0.008%\\n            name: \\\"BalancedScan\\\"\\n        });\\n\\n        // PiSniper NFT\\n        minerConfig[MinerType.PI_SNIPER] = MinerStats({\\n            minerType: MinerType.PI_SNIPER,\\n            minRange: 60000,\\n            maxRange: 70000,\\n            specialization: GameManager.PatternType.PI,\\n            baseSuccessRate: 12, // 0.012%\\n            name: \\\"PiSniper\\\"\\n        });\\n\\n        // SquareSeeker NFT\\n        minerConfig[MinerType.SQUARE_SEEKER] = MinerStats({\\n            minerType: MinerType.SQUARE_SEEKER,\\n            minRange: 30000,\\n            maxRange: 50000,\\n            specialization: GameManager.PatternType.SQUARE,\\n            baseSuccessRate: 14, // 0.014%\\n            name: \\\"SquareSeeker\\\"\\n        });\\n    }\\n\\n    function mintMiner(address to, MinerType minerType) external onlyAuthorizedMinter returns (uint256) {\\n        uint256 tokenId = _nextTokenId++;\\n\\n        MinerStats memory config = minerConfig[minerType];\\n        minerStats[tokenId] = config;\\n\\n        _safeMint(to, tokenId);\\n\\n        emit MinerMinted(to, tokenId, minerType, config.name);\\n\\n        return tokenId;\\n    }\\n\\n    function batchMintMiners(\\n        address to,\\n        MinerType[] calldata minerTypes\\n    ) external onlyAuthorizedMinter returns (uint256[] memory) {\\n        uint256[] memory tokenIds = new uint256[](minerTypes.length);\\n\\n        for (uint256 i = 0; i < minerTypes.length; i++) {\\n            uint256 tokenId = _nextTokenId++;\\n\\n            MinerStats memory config = minerConfig[minerTypes[i]];\\n            minerStats[tokenId] = config;\\n\\n            _safeMint(to, tokenId);\\n\\n            emit MinerMinted(to, tokenId, minerTypes[i], config.name);\\n            tokenIds[i] = tokenId;\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    // \\ubbfc\\ud305 \\uad8c\\ud55c \\uc124\\uc815 \\ud568\\uc218\\n    function setMinter(address minter, bool authorized) external onlyOwner {\\n        authorizedMinters[minter] = authorized;\\n        emit MinterAuthorized(minter, authorized);\\n    }\\n    \\n    // \\uc5ec\\ub7ec minter\\ub97c \\ud55c\\ubc88\\uc5d0 \\uc124\\uc815\\n    function setMultipleMinters(address[] calldata minters, bool authorized) external onlyOwner {\\n        for (uint256 i = 0; i < minters.length; i++) {\\n            authorizedMinters[minters[i]] = authorized;\\n            emit MinterAuthorized(minters[i], authorized);\\n        }\\n    }\\n\\n    function getMinerStats(uint256 tokenId) external view returns (MinerStats memory) {\\n        require(_ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\n        return minerStats[tokenId];\\n    }\\n\\n    function getOwnedMiners(address owner) external view returns (uint256[] memory) {\\n        uint256 balance = balanceOf(owner);\\n        uint256[] memory tokens = new uint256[](balance);\\n\\n        for (uint256 i = 0; i < balance; i++) {\\n            tokens[i] = tokenOfOwnerByIndex(owner, i);\\n        }\\n\\n        return tokens;\\n    }\\n\\n    function getMinerTypeStats(MinerType minerType) external view returns (MinerStats memory) {\\n        return minerConfig[minerType];\\n    }\\n\\n    function calculateEffectiveSuccessRate(\\n        uint256 tokenId,\\n        GameManager.PatternType currentPattern\\n    ) external view returns (uint256) {\\n        require(_ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\n\\n        MinerStats memory stats = minerStats[tokenId];\\n\\n        // BalancedScan\\uc740 \\ubaa8\\ub4e0 \\ud328\\ud134\\uc5d0 \\ub3d9\\uc77c\\ud55c \\uc131\\uacf5\\ub960\\n        if (stats.minerType == MinerType.BALANCED_SCAN) {\\n            return stats.baseSuccessRate;\\n        }\\n\\n        // \\ud2b9\\ud654 \\ud328\\ud134\\uacfc \\uc77c\\uce58\\ud558\\uba74 \\uae30\\ubcf8 \\uc131\\uacf5\\ub960, \\uc544\\ub2c8\\uba74 \\uc808\\ubc18\\n        if (stats.specialization == currentPattern) {\\n            return stats.baseSuccessRate;\\n        } else {\\n            return stats.baseSuccessRate / 2;\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\n\\n        MinerStats memory stats = minerStats[tokenId];\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://api.monaminer.com/nft/\\\",\\n                    Strings.toString(uint256(stats.minerType)),\\n                    \\\"/\\\",\\n                    Strings.toString(tokenId)\\n                )\\n            );\\n    }\\n\\n    // Override required functions\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721, ERC721Enumerable) returns (address) {\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    function _increaseBalance(address account, uint128 value) internal override(ERC721, ERC721Enumerable) {\\n        super._increaseBalance(account, value);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9c90e984057bba3040bf0fb949cb98e6463d93bff61df4835d0c56d266ff1635\",\"license\":\"MIT\"},\"contracts/MiningEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./GameManager.sol\\\";\\nimport \\\"./MinerNFT.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\n\\ncontract MiningEngine is Ownable, ReentrancyGuard {\\n    GameManager public gameManager;\\n    MinerNFT public minerNFT;\\n    RewardManager public rewardManager;\\n\\n    struct MiningSession {\\n        address player;\\n        uint256[3] nftIds;\\n        uint256 roundId;\\n        uint256 startTime;\\n        bool isActive;\\n        uint256 totalAttempts;\\n        uint256 totalSuccesses;\\n        uint256 lastMiningTime;\\n        bool autoMining; // \\uc790\\ub3d9 \\ucc44\\uad74 \\uc0c1\\ud0dc\\n        uint256 nextAutoMiningTime; // \\ub2e4\\uc74c \\uc790\\ub3d9 \\ucc44\\uad74 \\uc2dc\\uac04\\n    }\\n\\n    struct MiningAttempt {\\n        address player;\\n        uint256 nftId;\\n        uint256 roundId;\\n        uint256 randomNumber;\\n        bool success;\\n        uint256 timestamp;\\n    }\\n\\n\\n    uint256 public constant TPS_PER_MINER = 50; // \\ucd08\\ub2f9 50 \\ud2b8\\ub79c\\uc7ad\\uc158\\n    uint256 public constant MAX_MINING_DURATION = 600; // 10\\ubd84\\n    uint256 public constant MINING_INTERVAL = 200; // 0.2\\ucd08 (200ms)\\n    uint256 public constant BATCH_SIZE = 10; // \\ubc30\\uce58\\ub2f9 10\\uac1c \\ud2b8\\ub79c\\uc7ad\\uc158\\n\\n    mapping(address => MiningSession) public activeSessions;\\n    mapping(address => MiningAttempt[]) public miningHistory;\\n    mapping(address => uint256) public playerTotalSuccesses;\\n    mapping(address => bool) public autoMiningEnabled; // \\ud50c\\ub808\\uc774\\uc5b4\\ubcc4 \\uc790\\ub3d9 \\ucc44\\uad74 \\ud65c\\uc131\\ud654 \\uc0c1\\ud0dc\\n\\n    event MiningSessionStarted(address indexed player, uint256[3] nftIds, uint256 roundId, uint256 startTime);\\n\\n    event MiningSuccess(\\n        address indexed player,\\n        uint256 indexed nftId,\\n        uint256 randomNumber,\\n        uint256 roundId,\\n        uint256 timestamp\\n    );\\n\\n    event MiningSessionEnded(address indexed player, uint256 totalAttempts, uint256 totalSuccesses, uint256 endTime);\\n\\n    event BatchMiningCompleted(address indexed player, uint256 batchAttempts, uint256 batchSuccesses);\\n    \\n    event AutoMiningStarted(address indexed player);\\n    event AutoMiningStopped(address indexed player);\\n    event AutoMiningBatch(address indexed player, uint256 batchSuccesses);\\n\\n    constructor(\\n        address _gameManager,\\n        address _minerNFT,\\n        address _rewardManager\\n    ) Ownable(msg.sender) {\\n        gameManager = GameManager(_gameManager);\\n        minerNFT = MinerNFT(_minerNFT);\\n        rewardManager = RewardManager(_rewardManager);\\n    }\\n\\n    function startMining(uint256[3] calldata nftIds) external nonReentrant {\\n        require(!activeSessions[msg.sender].isActive, \\\"Already mining\\\");\\n        require(gameManager.isRoundActive(), \\\"No active round\\\");\\n\\n        // NFT \\uc18c\\uc720\\uad8c \\ud655\\uc778\\n        for (uint256 i = 0; i < 3; i++) {\\n            require(minerNFT.ownerOf(nftIds[i]) == msg.sender, \\\"Not NFT owner\\\");\\n        }\\n\\n        GameManager.Round memory currentRound = gameManager.getCurrentRound();\\n\\n        activeSessions[msg.sender] = MiningSession({\\n            player: msg.sender,\\n            nftIds: nftIds,\\n            roundId: currentRound.roundId,\\n            startTime: block.timestamp,\\n            isActive: true,\\n            totalAttempts: 0,\\n            totalSuccesses: 0,\\n            lastMiningTime: block.timestamp,\\n            autoMining: false,\\n            nextAutoMiningTime: 0\\n        });\\n\\n        emit MiningSessionStarted(msg.sender, nftIds, currentRound.roundId, block.timestamp);\\n    }\\n\\n    function performBatchMining() external nonReentrant {\\n        MiningSession storage session = activeSessions[msg.sender];\\n        require(session.isActive, \\\"No active session\\\");\\n        require(block.timestamp >= session.lastMiningTime + (MINING_INTERVAL / 1000), \\\"Mining too fast\\\");\\n        require(block.timestamp < session.startTime + MAX_MINING_DURATION, \\\"Mining session expired\\\");\\n\\n        GameManager.Round memory currentRound = gameManager.getCurrentRound();\\n        require(session.roundId == currentRound.roundId, \\\"Round changed\\\");\\n\\n        uint256 batchSuccesses = 0;\\n\\n        // 3\\uac1c NFT \\u00d7 10\\uac1c\\uc529 = 30\\uac1c \\ubc30\\uce58 \\ucc98\\ub9ac (\\uc2dc\\ub4dc \\uae30\\ubc18 \\ub79c\\ub364)\\n        for (uint256 i = 0; i < 3; i++) {\\n            for (uint256 j = 0; j < BATCH_SIZE; j++) {\\n                uint256 randomNumber = _generateRandomNumber(session.nftIds[i], j, session.totalAttempts);\\n                \\n                // \\ucc44\\uad74 \\uc131\\uacf5 \\uc5ec\\ubd80 \\ud655\\uc778\\n                bool success = _checkMiningSuccess(randomNumber, session.nftIds[i], currentRound);\\n                \\n                if (success) {\\n                    batchSuccesses++;\\n                    session.totalSuccesses++;\\n                    playerTotalSuccesses[msg.sender]++;\\n\\n                    // \\uc131\\uacf5 \\uae30\\ub85d\\n                    miningHistory[msg.sender].push(\\n                        MiningAttempt({\\n                            player: msg.sender,\\n                            nftId: session.nftIds[i],\\n                            roundId: session.roundId,\\n                            randomNumber: randomNumber,\\n                            success: true,\\n                            timestamp: block.timestamp\\n                        })\\n                    );\\n\\n                    // GameManager\\uc5d0\\uc11c \\ubcf4\\uc0c1 \\uc9c0\\uae09\\n                    gameManager.claimReward(msg.sender);\\n\\n                    emit MiningSuccess(msg.sender, session.nftIds[i], randomNumber, session.roundId, block.timestamp);\\n                }\\n\\n                session.totalAttempts++;\\n            }\\n        }\\n\\n        session.lastMiningTime = block.timestamp;\\n\\n        emit BatchMiningCompleted(msg.sender, BATCH_SIZE * 3, batchSuccesses);\\n\\n        // \\uc138\\uc158 \\ub9cc\\ub8cc \\uccb4\\ud06c\\n        if (block.timestamp >= session.startTime + MAX_MINING_DURATION) {\\n            _endMiningSession(msg.sender);\\n        }\\n    }\\n\\n    function stopMining() external {\\n        require(activeSessions[msg.sender].isActive, \\\"No active session\\\");\\n        _endMiningSession(msg.sender);\\n    }\\n\\n    // \\uc790\\ub3d9 \\ucc44\\uad74 \\uc2dc\\uc791\\n    function startAutoMining() external {\\n        MiningSession storage session = activeSessions[msg.sender];\\n        require(session.isActive, \\\"No active session\\\");\\n        require(!session.autoMining, \\\"Auto mining already active\\\");\\n        \\n        session.autoMining = true;\\n        session.nextAutoMiningTime = block.timestamp + (MINING_INTERVAL / 1000);\\n        autoMiningEnabled[msg.sender] = true;\\n        \\n        emit AutoMiningStarted(msg.sender);\\n    }\\n\\n    // \\uc790\\ub3d9 \\ucc44\\uad74 \\uc815\\uc9c0\\n    function stopAutoMining() external {\\n        MiningSession storage session = activeSessions[msg.sender];\\n        require(session.isActive, \\\"No active session\\\");\\n        require(session.autoMining, \\\"Auto mining not active\\\");\\n        \\n        session.autoMining = false;\\n        session.nextAutoMiningTime = 0;\\n        autoMiningEnabled[msg.sender] = false;\\n        \\n        emit AutoMiningStopped(msg.sender);\\n    }\\n\\n    // \\uc790\\ub3d9 \\ucc44\\uad74 \\ubc30\\uce58 \\uc2e4\\ud589 (\\uc678\\ubd80\\uc5d0\\uc11c \\ud638\\ucd9c \\uac00\\ub2a5)\\n    function executeAutoMining(address player) external {\\n        MiningSession storage session = activeSessions[player];\\n        require(session.isActive, \\\"No active session\\\");\\n        require(session.autoMining, \\\"Auto mining not enabled\\\");\\n        require(block.timestamp >= session.nextAutoMiningTime, \\\"Auto mining cooldown\\\");\\n        require(block.timestamp < session.startTime + MAX_MINING_DURATION, \\\"Mining session expired\\\");\\n\\n        GameManager.Round memory currentRound = gameManager.getCurrentRound();\\n        require(session.roundId == currentRound.roundId, \\\"Round changed\\\");\\n\\n        uint256 batchSuccesses = 0;\\n\\n        // 3\\uac1c NFT \\u00d7 10\\uac1c\\uc529 = 30\\uac1c \\ubc30\\uce58 \\ucc98\\ub9ac (\\uc790\\ub3d9)\\n        for (uint256 i = 0; i < 3; i++) {\\n            for (uint256 j = 0; j < BATCH_SIZE; j++) {\\n                uint256 randomNumber = _generateRandomNumber(session.nftIds[i], j, session.totalAttempts);\\n                \\n                // \\ucc44\\uad74 \\uc131\\uacf5 \\uc5ec\\ubd80 \\ud655\\uc778\\n                bool success = _checkMiningSuccess(randomNumber, session.nftIds[i], currentRound);\\n                \\n                if (success) {\\n                    batchSuccesses++;\\n                    session.totalSuccesses++;\\n                    playerTotalSuccesses[player]++;\\n\\n                    // \\uc131\\uacf5 \\uae30\\ub85d\\n                    miningHistory[player].push(\\n                        MiningAttempt({\\n                            player: player,\\n                            nftId: session.nftIds[i],\\n                            roundId: session.roundId,\\n                            randomNumber: randomNumber,\\n                            success: true,\\n                            timestamp: block.timestamp\\n                        })\\n                    );\\n\\n                    // GameManager\\uc5d0\\uc11c \\ubcf4\\uc0c1 \\uc9c0\\uae09\\n                    gameManager.claimReward(player);\\n\\n                    emit MiningSuccess(player, session.nftIds[i], randomNumber, session.roundId, block.timestamp);\\n                }\\n\\n                session.totalAttempts++;\\n            }\\n        }\\n\\n        // \\ub2e4\\uc74c \\uc790\\ub3d9 \\ucc44\\uad74 \\uc2dc\\uac04 \\uc124\\uc815\\n        session.lastMiningTime = block.timestamp;\\n        session.nextAutoMiningTime = block.timestamp + (MINING_INTERVAL / 1000);\\n\\n        emit AutoMiningBatch(player, batchSuccesses);\\n\\n        // \\uc138\\uc158 \\ub9cc\\ub8cc \\uccb4\\ud06c\\n        if (block.timestamp >= session.startTime + MAX_MINING_DURATION) {\\n            session.autoMining = false;\\n            autoMiningEnabled[player] = false;\\n            _endMiningSession(player);\\n        }\\n    }\\n\\n    function _endMiningSession(address player) internal {\\n        MiningSession storage session = activeSessions[player];\\n\\n        // \\uc790\\ub3d9 \\ucc44\\uad74 \\uc815\\uc9c0\\n        if (session.autoMining) {\\n            session.autoMining = false;\\n            autoMiningEnabled[player] = false;\\n            emit AutoMiningStopped(player);\\n        }\\n\\n        // \\uc644\\uc8fc \\ubcf4\\ub108\\uc2a4 \\uccb4\\ud06c (90,000 \\ud2b8\\ub79c\\uc7ad\\uc158)\\n        if (session.totalAttempts >= 90000) {\\n            rewardManager.distributeCompletionBonus(player);\\n        }\\n\\n        emit MiningSessionEnded(player, session.totalAttempts, session.totalSuccesses, block.timestamp);\\n\\n        session.isActive = false;\\n    }\\n\\n    function _generateRandomNumber(uint256 nftId, uint256 seed, uint256 totalAttempts) internal view returns (uint256) {\\n        // \\ube14\\ub85d \\ub370\\uc774\\ud130\\uc640 \\uc0ac\\uc6a9\\uc790 \\ub370\\uc774\\ud130\\ub97c \\uc870\\ud569\\ud55c \\uc2dc\\ub4dc \\uae30\\ubc18 \\ub79c\\ub364\\uac12 \\uc0dd\\uc131\\n        return uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp,\\n                    block.prevrandao,\\n                    msg.sender,\\n                    nftId,\\n                    seed,\\n                    totalAttempts,\\n                    gasleft()\\n                )\\n            )\\n        );\\n    }\\n\\n    function _checkMiningSuccess(\\n        uint256 randomNumber,\\n        uint256 nftId,\\n        GameManager.Round memory round\\n    ) internal view returns (bool) {\\n        // \\ubc94\\uc704 \\uccb4\\ud06c\\n        uint256 targetNumber = (randomNumber % (round.maxRange - round.minRange + 1)) + round.minRange;\\n\\n        // \\ud328\\ud134 \\uccb4\\ud06c\\n        bool patternMatch = _checkPattern(targetNumber, round.pattern);\\n        if (!patternMatch) {\\n            return false;\\n        }\\n\\n        // \\uc131\\uacf5\\ub960 \\uccb4\\ud06c\\n        uint256 effectiveSuccessRate = minerNFT.calculateEffectiveSuccessRate(nftId, round.pattern);\\n        uint256 successThreshold = (randomNumber % 10000);\\n\\n        return successThreshold < effectiveSuccessRate;\\n    }\\n\\n    function _checkPattern(uint256 number, GameManager.PatternType pattern) internal pure returns (bool) {\\n        if (pattern == GameManager.PatternType.EVEN) {\\n            return number % 2 == 0;\\n        } else if (pattern == GameManager.PatternType.ODD) {\\n            return number % 2 == 1;\\n        } else if (pattern == GameManager.PatternType.PRIME) {\\n            return _isPrime(number);\\n        } else if (pattern == GameManager.PatternType.PI) {\\n            return _isPiRelated(number);\\n        } else if (pattern == GameManager.PatternType.SQUARE) {\\n            return _isPerfectSquare(number);\\n        }\\n        return false;\\n    }\\n\\n    function _isPrime(uint256 n) internal pure returns (bool) {\\n        if (n < 2) return false;\\n        if (n == 2) return true;\\n        if (n % 2 == 0) return false;\\n\\n        for (uint256 i = 3; i * i <= n; i += 2) {\\n            if (n % i == 0) return false;\\n        }\\n        return true;\\n    }\\n\\n    function _isPiRelated(uint256 n) internal pure returns (bool) {\\n        // 314\\ub97c \\ud3ec\\ud568\\ud558\\uac70\\ub098 314\\uc758 \\ubc30\\uc218\\n        string memory numStr = _toString(n);\\n        return _contains(numStr, \\\"314\\\") || n % 314 == 0;\\n    }\\n\\n    function _isPerfectSquare(uint256 n) internal pure returns (bool) {\\n        if (n == 0) return true;\\n        uint256 sqrt = _sqrt(n);\\n        return sqrt * sqrt == n;\\n    }\\n\\n    function _sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 result = 1;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n        return result;\\n    }\\n\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function _contains(string memory str, string memory substr) internal pure returns (bool) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory substrBytes = bytes(substr);\\n\\n        if (substrBytes.length > strBytes.length) return false;\\n\\n        for (uint256 i = 0; i <= strBytes.length - substrBytes.length; i++) {\\n            bool found = true;\\n            for (uint256 j = 0; j < substrBytes.length; j++) {\\n                if (strBytes[i + j] != substrBytes[j]) {\\n                    found = false;\\n                    break;\\n                }\\n            }\\n            if (found) return true;\\n        }\\n        return false;\\n    }\\n\\n    // \\uc870\\ud68c \\ud568\\uc218\\ub4e4\\n    function getMiningStats(\\n        address player\\n    )\\n        external\\n        view\\n        returns (uint256 attempts, uint256 successes, uint256 currentTPS, bool isActive, uint256 remainingTime)\\n    {\\n        MiningSession memory session = activeSessions[player];\\n        uint256 elapsed = block.timestamp - session.startTime;\\n\\n        return (\\n            session.totalAttempts,\\n            session.totalSuccesses,\\n            elapsed > 0 ? session.totalAttempts / elapsed : 0,\\n            session.isActive,\\n            session.isActive\\n                ? (\\n                    session.startTime + MAX_MINING_DURATION > block.timestamp\\n                        ? session.startTime + MAX_MINING_DURATION - block.timestamp\\n                        : 0\\n                )\\n                : 0\\n        );\\n    }\\n\\n    // \\uc790\\ub3d9 \\ucc44\\uad74 \\uc0c1\\ud0dc \\uc870\\ud68c\\n    function getAutoMiningStatus(address player) \\n        external \\n        view \\n        returns (bool isAutoMining, uint256 nextMiningTime, uint256 cooldownRemaining) \\n    {\\n        MiningSession memory session = activeSessions[player];\\n        \\n        uint256 cooldown = 0;\\n        if (session.nextAutoMiningTime > block.timestamp) {\\n            cooldown = session.nextAutoMiningTime - block.timestamp;\\n        }\\n        \\n        return (\\n            session.autoMining,\\n            session.nextAutoMiningTime,\\n            cooldown\\n        );\\n    }\\n\\n    // \\uc790\\ub3d9 \\ucc44\\uad74 \\uc2e4\\ud589 \\uac00\\ub2a5 \\uc5ec\\ubd80 \\ud655\\uc778\\n    function canExecuteAutoMining(address player) external view returns (bool) {\\n        MiningSession memory session = activeSessions[player];\\n        \\n        return session.isActive && \\n               session.autoMining && \\n               block.timestamp >= session.nextAutoMiningTime &&\\n               block.timestamp < session.startTime + MAX_MINING_DURATION;\\n    }\\n\\n    function getMiningHistory(address player, uint256 limit) external view returns (MiningAttempt[] memory) {\\n        MiningAttempt[] memory history = miningHistory[player];\\n        if (limit == 0 || limit > history.length) {\\n            return history;\\n        }\\n\\n        MiningAttempt[] memory limitedHistory = new MiningAttempt[](limit);\\n        uint256 startIndex = history.length - limit;\\n        for (uint256 i = 0; i < limit; i++) {\\n            limitedHistory[i] = history[startIndex + i];\\n        }\\n        return limitedHistory;\\n    }\\n\\n    function getRecentSuccesses(uint256 count) external view returns (MiningAttempt[] memory) {\\n        // \\ucd5c\\uadfc \\uc131\\uacf5 \\uc0ac\\ub840\\ub4e4\\uc744 \\ubc18\\ud658 (\\uba54\\ud0c0 \\uac8c\\uc784\\uc6a9)\\n        // \\uac04\\ub2e8\\ud55c \\uad6c\\ud604\\uc73c\\ub85c \\ud604\\uc7ac \\ud50c\\ub808\\uc774\\uc5b4\\uc758 \\uc131\\uacf5\\ub9cc \\ubc18\\ud658\\n        MiningAttempt[] memory history = miningHistory[msg.sender];\\n        if (count == 0 || count > history.length) {\\n            return history;\\n        }\\n\\n        MiningAttempt[] memory limitedHistory = new MiningAttempt[](count);\\n        uint256 startIndex = history.length - count;\\n        for (uint256 i = 0; i < count; i++) {\\n            limitedHistory[i] = history[startIndex + i];\\n        }\\n        return limitedHistory;\\n    }\\n\\n\\n    // Admin functions\\n    function setGameManager(address _gameManager) external onlyOwner {\\n        gameManager = GameManager(_gameManager);\\n    }\\n\\n    function setMinerNFT(address _minerNFT) external onlyOwner {\\n        minerNFT = MinerNFT(_minerNFT);\\n    }\\n\\n    function setRewardManager(address _rewardManager) external onlyOwner {\\n        rewardManager = RewardManager(_rewardManager);\\n    }\\n\\n    function forceEndSession(address player) external onlyOwner {\\n        require(activeSessions[player].isActive, \\\"No active session\\\");\\n        _endMiningSession(player);\\n    }\\n}\\n\",\"keccak256\":\"0xc9276e2282cbe12f697ad0d7850801fcfec4b649d044a7797b3b41eea6d8d08b\",\"license\":\"MIT\"},\"contracts/RewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract RewardManager is Ownable, ReentrancyGuard {\\n    IERC20 public mmToken;\\n\\n    uint256 public constant BASIC_REWARD = 30 ether; // 30 MM per success\\n    uint256 public constant COMPLETION_BONUS = 500 ether; // 500 MM for completion\\n    uint256 public constant DEV_FEE_PERCENT = 10; // 10% dev fee\\n\\n    address public devWallet;\\n    address public miningEngine;\\n\\n    struct RewardStats {\\n        uint256 totalBasicRewards;\\n        uint256 totalCompletionBonuses;\\n        uint256 totalDevFees;\\n        uint256 totalDistributed;\\n    }\\n\\n    mapping(address => uint256) public playerTotalEarned;\\n    mapping(address => uint256) public playerBasicRewards;\\n    mapping(address => uint256) public playerCompletionBonuses;\\n\\n    RewardStats public rewardStats;\\n\\n    event BasicRewardDistributed(address indexed player, uint256 amount, uint256 devFee, uint256 timestamp);\\n\\n    event CompletionBonusDistributed(address indexed player, uint256 amount, uint256 timestamp);\\n\\n    event DevFeeCollected(address indexed devWallet, uint256 amount, uint256 timestamp);\\n\\n    modifier onlyMiningEngine() {\\n        require(msg.sender == miningEngine, \\\"Only mining engine\\\");\\n        _;\\n    }\\n\\n    constructor(address _mmToken, address _devWallet) Ownable(msg.sender) {\\n        mmToken = IERC20(_mmToken);\\n        devWallet = _devWallet;\\n    }\\n\\n    function distributeBasicReward(address player) external onlyMiningEngine nonReentrant {\\n        require(player != address(0), \\\"Invalid player address\\\");\\n\\n        uint256 devFee = (BASIC_REWARD * DEV_FEE_PERCENT) / 100;\\n        uint256 playerReward = BASIC_REWARD - devFee;\\n\\n        // \\ud50c\\ub808\\uc774\\uc5b4\\uc5d0\\uac8c \\ubcf4\\uc0c1 \\uc9c0\\uae09\\n        require(mmToken.transfer(player, playerReward), \\\"Player reward transfer failed\\\");\\n\\n        // \\uac1c\\ubc1c\\ud300\\uc5d0\\uac8c \\uc218\\uc218\\ub8cc \\uc9c0\\uae09\\n        require(mmToken.transfer(devWallet, devFee), \\\"Dev fee transfer failed\\\");\\n\\n        // \\ud1b5\\uacc4 \\uc5c5\\ub370\\uc774\\ud2b8\\n        playerTotalEarned[player] += playerReward;\\n        playerBasicRewards[player] += playerReward;\\n\\n        rewardStats.totalBasicRewards += playerReward;\\n        rewardStats.totalDevFees += devFee;\\n        rewardStats.totalDistributed += BASIC_REWARD;\\n\\n        emit BasicRewardDistributed(player, playerReward, devFee, block.timestamp);\\n        emit DevFeeCollected(devWallet, devFee, block.timestamp);\\n    }\\n\\n    function distributeCompletionBonus(address player) external onlyMiningEngine nonReentrant {\\n        require(player != address(0), \\\"Invalid player address\\\");\\n\\n        // \\uc644\\uc8fc \\ubcf4\\ub108\\uc2a4\\ub294 \\uac1c\\ubc1c\\ud300 \\uc218\\uc218\\ub8cc \\uc5c6\\uc774 \\uc804\\uc561 \\uc9c0\\uae09\\n        require(mmToken.transfer(player, COMPLETION_BONUS), \\\"Completion bonus transfer failed\\\");\\n\\n        // \\ud1b5\\uacc4 \\uc5c5\\ub370\\uc774\\ud2b8\\n        playerTotalEarned[player] += COMPLETION_BONUS;\\n        playerCompletionBonuses[player] += COMPLETION_BONUS;\\n\\n        rewardStats.totalCompletionBonuses += COMPLETION_BONUS;\\n        rewardStats.totalDistributed += COMPLETION_BONUS;\\n\\n        emit CompletionBonusDistributed(player, COMPLETION_BONUS, block.timestamp);\\n    }\\n\\n    function batchDistributeRewards(address[] calldata players, uint256[] calldata amounts) external onlyOwner {\\n        require(players.length == amounts.length, \\\"Arrays length mismatch\\\");\\n\\n        for (uint256 i = 0; i < players.length; i++) {\\n            require(mmToken.transfer(players[i], amounts[i]), \\\"Batch transfer failed\\\");\\n            playerTotalEarned[players[i]] += amounts[i];\\n            rewardStats.totalDistributed += amounts[i];\\n        }\\n    }\\n\\n    function emergencyWithdraw(address to, uint256 amount) external onlyOwner {\\n        require(mmToken.transfer(to, amount), \\\"Emergency withdrawal failed\\\");\\n    }\\n\\n    function getPlayerStats(\\n        address player\\n    ) external view returns (uint256 totalEarned, uint256 basicRewards, uint256 completionBonuses) {\\n        return (playerTotalEarned[player], playerBasicRewards[player], playerCompletionBonuses[player]);\\n    }\\n\\n    function getContractBalance() external view returns (uint256) {\\n        return mmToken.balanceOf(address(this));\\n    }\\n\\n    function simulateROI(\\n        uint256 investmentCost,\\n        uint256 expectedSuccesses,\\n        bool willComplete\\n    ) external pure returns (uint256 totalRevenue, uint256 netProfit, uint256 roiPercent) {\\n        uint256 completionBonusTotal = willComplete ? COMPLETION_BONUS : 0;\\n\\n        totalRevenue =\\n            (expectedSuccesses * (BASIC_REWARD - (BASIC_REWARD * DEV_FEE_PERCENT) / 100)) +\\n            completionBonusTotal;\\n\\n        if (totalRevenue >= investmentCost) {\\n            netProfit = totalRevenue - investmentCost;\\n            roiPercent = (netProfit * 100) / investmentCost;\\n        } else {\\n            netProfit = 0;\\n            roiPercent = 0;\\n        }\\n\\n        return (totalRevenue, netProfit, roiPercent);\\n    }\\n\\n    function calculateRevenueProjection(\\n        uint256 successCount,\\n        bool completedMining\\n    ) external pure returns (uint256 totalPlayerReward, uint256 totalDevFee, uint256 totalCost) {\\n        uint256 basicRewardTotal = successCount * BASIC_REWARD;\\n        uint256 completionBonusTotal = completedMining ? COMPLETION_BONUS : 0;\\n\\n        totalPlayerReward =\\n            (successCount * (BASIC_REWARD - (BASIC_REWARD * DEV_FEE_PERCENT) / 100)) +\\n            completionBonusTotal;\\n        totalDevFee = (successCount * (BASIC_REWARD * DEV_FEE_PERCENT)) / 100;\\n        totalCost = basicRewardTotal + completionBonusTotal;\\n\\n        return (totalPlayerReward, totalDevFee, totalCost);\\n    }\\n\\n    // Admin functions\\n    function setMMToken(address _mmToken) external onlyOwner {\\n        mmToken = IERC20(_mmToken);\\n    }\\n\\n    function setDevWallet(address _devWallet) external onlyOwner {\\n        devWallet = _devWallet;\\n    }\\n\\n    function setMiningEngine(address _miningEngine) external onlyOwner {\\n        miningEngine = _miningEngine;\\n    }\\n\\n    function fundContract(uint256 amount) external onlyOwner {\\n        require(mmToken.transferFrom(msg.sender, address(this), amount), \\\"Funding failed\\\");\\n    }\\n\\n    function getDetailedStats()\\n        external\\n        view\\n        returns (RewardStats memory stats, uint256 contractBalance, uint256 totalPlayers)\\n    {\\n        return (\\n            rewardStats,\\n            mmToken.balanceOf(address(this)),\\n            0 // totalPlayers\\ub294 \\ubcc4\\ub3c4 \\uce74\\uc6b4\\ud130 \\ud544\\uc694\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x15f9a3006562905f5d4b01684fb3f40b183ea6f63fcd87d4d5d3c66d9d8e4ebf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806367a9fdb211610104578063b7127e41116100a2578063c6b0526611610071578063c6b05266146104f0578063da40867914610503578063f2fde38b1461050b578063f5372b781461051e57600080fd5b8063b7127e4114610487578063b80b03e41461049a578063bdc59207146104ca578063c4d137c6146104dd57600080fd5b80638da5cb5b116100de5780638da5cb5b14610410578063996a0b5b146104215780639a4ca5a114610441578063aba71b391461047e57600080fd5b806367a9fdb2146103ed578063715018a6146104005780637f54f6c21461040857600080fd5b806327f79d1e1161017157806349faa4d41161014b57806349faa4d41461037e5780634da3255d146103865780634eff2240146103995780635dc1fbc6146103e557600080fd5b806327f79d1e146103505780632ba77ec41461036357806333188aa51461037657600080fd5b8063153ee554116101ad578063153ee5541461022f57806323ef2936146102425780632409dcda146102fd57806326ea71c21461033057600080fd5b806306c55133146101d45780630f4ef8a6146101ef578063139aea4d1461021a575b600080fd5b6101dc603281565b6040519081526020015b60405180910390f35b600454610202906001600160a01b031681565b6040516001600160a01b0390911681526020016101e6565b61022d6102283660046125a2565b610526565b005b61022d61023d3660046125a2565b610a7b565b6102ad6102503660046125a2565b600560208190526000918252604090912080546004820154928201546006830154600784015460088501546009860154600a870154600b909701546001600160a01b039096169796949560ff948516959394929391929091169089565b604080516001600160a01b03909a168a5260208a0198909852968801959095529215156060870152608086019190915260a085015260c0840152151560e0830152610100820152610120016101e6565b61032061030b3660046125a2565b60086020526000908152604090205460ff1681565b60405190151581526020016101e6565b61034361033e3660046125bf565b610aa5565b6040516101e691906125eb565b61022d61035e36600461266e565b610c44565b61022d6103713660046125a2565b611029565b61022d611075565b6101dc600a81565b61022d6103943660046125a2565b61116b565b6103ac6103a73660046125bf565b611195565b604080516001600160a01b03909716875260208701959095529385019290925260608401521515608083015260a082015260c0016101e6565b61022d6111f9565b6103436103fb366004612696565b611695565b61022d611827565b6101dc60c881565b6000546001600160a01b0316610202565b6101dc61042f3660046125a2565b60076020526000908152604090205481565b61045461044f3660046125a2565b611839565b6040805195865260208601949094529284019190915215156060830152608082015260a0016101e6565b6101dc61025881565b61022d6104953660046125a2565b6119a9565b6104ad6104a83660046125a2565b6119d3565b6040805193151584526020840192909252908201526060016101e6565b6103206104d83660046125a2565b611adc565b600354610202906001600160a01b031681565b600254610202906001600160a01b031681565b61022d611bef565b61022d6105193660046125a2565b611c2a565b61022d611c65565b6001600160a01b0381166000908152600560205260409020600681015460ff1661056b5760405162461bcd60e51b8152600401610562906126af565b60405180910390fd5b600a81015460ff166105bf5760405162461bcd60e51b815260206004820152601760248201527f4175746f206d696e696e67206e6f7420656e61626c65640000000000000000006044820152606401610562565b80600b015442101561060a5760405162461bcd60e51b815260206004820152601460248201527320baba379036b4b734b7339031b7b7b63237bbb760611b6044820152606401610562565b610258816005015461061c91906126f0565b42106106635760405162461bcd60e51b8152602060048201526016602482015275135a5b9a5b99c81cd95cdcda5bdb88195e1c1a5c995960521b6044820152606401610562565b6002546040805163a32bf59760e01b815290516000926001600160a01b03169163a32bf597916004808301926101209291908290030181865afa1580156106ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d29190612775565b80516004840154919250146107195760405162461bcd60e51b815260206004820152600d60248201526c149bdd5b990818da185b99d959609a1b6044820152606401610562565b6000805b60038110156109c55760005b600a8110156109b257600061075986600101846003811061074c5761074c6127fc565b0154838860070154611d3c565b9050600061077e82886001018660038110610776576107766127fc565b015488611dac565b90508015610986578461079081612812565b60088901805491975090915060006107a783612812565b90915550506001600160a01b03881660009081526007602052604081208054916107d083612812565b90915550506001600160a01b038816600081815260066020908152604091829020825160c08101909352928252810160018a018760038110610814576108146127fc565b0154815260048a8101546020808401919091526040808401889052600160608086018290524260809687015287548083018955600098895297849020875160069099020180546001600160a01b0319166001600160a01b03998a1617815593870151918401919091558582015160028085019190915590860151600384015593850151828401805460ff191691151591909117905560a0909401516005909101559054915163d279c19160e01b81528b84169181019190915291169063d279c191906024016020604051808303816000875af11580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c919061282b565b50866001018460038110610932576109326127fc565b0154600488015460408051858152602081019290925242908201526001600160a01b038a16907f753244bf3a31bdabae643d3f0b38eefe101e7e80bced1b8a8ef071ff82ab91d99060600160405180910390a35b60078701805490600061099883612812565b9190505550505080806109aa90612812565b915050610729565b50806109bd81612812565b91505061071d565b504260098401556109d96103e860c861285c565b6109e390426126f0565b600b8401556040518181526001600160a01b038516907ff87bb534c53def9095239d41b53663a712fb1c62bc8020d23199695e0696c9e49060200160405180910390a26102588360050154610a3891906126f0565b4210610a7557600a8301805460ff199081169091556001600160a01b038516600090815260086020526040902080549091169055610a7584611e9f565b50505050565b610a83611ff0565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b82821015610b505760008481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460ff16151560808401526005015460a08301529083529092019101610ada565b5050505090508260001480610b655750805183115b15610b71579050610c3e565b60008367ffffffffffffffff811115610b8c57610b8c612703565b604051908082528060200260200182016040528015610bc557816020015b610bb26124f9565b815260200190600190039081610baa5790505b5090506000848351610bd79190612870565b905060005b85811015610c375783610bef82846126f0565b81518110610bff57610bff6127fc565b6020026020010151838281518110610c1957610c196127fc565b60200260200101819052508080610c2f90612812565b915050610bdc565b5090925050505b92915050565b610c4c61201d565b3360009081526005602052604090206006015460ff1615610ca05760405162461bcd60e51b815260206004820152600e60248201526d416c7265616479206d696e696e6760901b6044820152606401610562565b600260009054906101000a90046001600160a01b03166001600160a01b03166345945a456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d17919061282b565b610d555760405162461bcd60e51b815260206004820152600f60248201526e139bc81858dd1a5d99481c9bdd5b99608a1b6044820152606401610562565b60005b6003811015610e47576003805433916001600160a01b0390911690636352211e90859085908110610d8b57610d8b6127fc565b60200201356040518263ffffffff1660e01b8152600401610dae91815260200190565b602060405180830381865afa158015610dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610def9190612883565b6001600160a01b031614610e355760405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1037bbb732b960991b6044820152606401610562565b80610e3f81612812565b915050610d58565b506002546040805163a32bf59760e01b815290516000926001600160a01b03169163a32bf597916004808301926101209291908290030181865afa158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb79190612775565b604080516101408101825233815281516060818101909352929350916020830191859060039083908390808284376000920182905250928452505083516020808401919091524260408085018290526001606086018190526080860185905260a0860185905260c086019290925260e085018490526101009094018390523383526005825292909120835181546001600160a01b0319166001600160a01b03909116178155908301519091610f719190830190600361253a565b50604082810151600483015560608301516005830155608083015160068301805491151560ff1992831617905560a0840151600784015560c0840151600884015560e08401516009840155610100840151600a840180549115159190921617905561012090920151600b909101558151905133917f6eaae12a5fd9196b99643264fbbedcd6275fbeb394377c0440fbde96bc726cad9161101491869142906128a0565b60405180910390a25061102660018055565b50565b611031611ff0565b6001600160a01b03811660009081526005602052604090206006015460ff1661106c5760405162461bcd60e51b8152600401610562906126af565b61102681611e9f565b336000908152600560205260409020600681015460ff166110a85760405162461bcd60e51b8152600401610562906126af565b600a81015460ff16156110fd5760405162461bcd60e51b815260206004820152601a60248201527f4175746f206d696e696e6720616c7265616479206163746976650000000000006044820152606401610562565b600a8101805460ff191660011790556111196103e860c861285c565b61112390426126f0565b600b82015533600081815260086020526040808220805460ff19166001179055517f5787f91f6aba431e6513a07e87e374b7e663eb1be1154ed4ed8babb31ef7ad5b9190a250565b611173611ff0565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600660205281600052604060002081815481106111b157600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03909416965091945092909160ff9091169086565b61120161201d565b336000908152600560205260409020600681015460ff166112345760405162461bcd60e51b8152600401610562906126af565b6112416103e860c861285c565b816009015461125091906126f0565b4210156112915760405162461bcd60e51b815260206004820152600f60248201526e135a5b9a5b99c81d1bdbc819985cdd608a1b6044820152606401610562565b61025881600501546112a391906126f0565b42106112ea5760405162461bcd60e51b8152602060048201526016602482015275135a5b9a5b99c81cd95cdcda5bdb88195e1c1a5c995960521b6044820152606401610562565b6002546040805163a32bf59760e01b815290516000926001600160a01b03169163a32bf597916004808301926101209291908290030181865afa158015611335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113599190612775565b80516004840154919250146113a05760405162461bcd60e51b815260206004820152600d60248201526c149bdd5b990818da185b99d959609a1b6044820152606401610562565b6000805b600381101561161a5760005b600a8110156116075760006113d386600101846003811061074c5761074c6127fc565b905060006113f082886001018660038110610776576107766127fc565b905080156115db578461140281612812565b600889018054919750909150600061141983612812565b909155505033600090815260076020526040812080549161143983612812565b909155505033600081815260066020908152604091829020825160c08101909352928252810160018a018760038110611474576114746127fc565b0154815260048a8101546020808401919091526040808401889052600160608086018290524260809687015287548083018955600098895297849020875160069099020180546001600160a01b0319166001600160a01b03998a1617815593870151918401919091558582015160028085019190915590860151600384015593850151828401805460ff191691151591909117905560a0909401516005909101559054915163d279c19160e01b8152339181019190915291169063d279c191906024016020604051808303816000875af1158015611556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157a919061282b565b50866001018460038110611590576115906127fc565b01546004880154604080518581526020810192909252429082015233907f753244bf3a31bdabae643d3f0b38eefe101e7e80bced1b8a8ef071ff82ab91d99060600160405180910390a35b6007870180549060006115ed83612812565b9190505550505080806115ff90612812565b9150506113b0565b508061161281612812565b9150506113a4565b50426009840155337f667d547a1c63d0f91f59b11df858d15f070f86530ba0e1579306054fbbf7dc8161164f600a60036128ba565b60408051918252602082018590520160405180910390a2610258836005015461167891906126f0565b42106116875761168733611e9f565b50505061169360018055565b565b336000908152600660209081526040808320805482518185028101850190935280835260609493849084015b828210156117375760008481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460ff16151560808401526005015460a083015290835290920191016116c1565b505050509050826000148061174c5750805183115b156117575792915050565b60008367ffffffffffffffff81111561177257611772612703565b6040519080825280602002602001820160405280156117ab57816020015b6117986124f9565b8152602001906001900390816117905790505b50905060008483516117bd9190612870565b905060005b8581101561181d57836117d582846126f0565b815181106117e5576117e56127fc565b60200260200101518382815181106117ff576117ff6127fc565b6020026020010181905250808061181590612812565b9150506117c2565b5090949350505050565b61182f611ff0565b6116936000612047565b6001600160a01b0381811660009081526005602090815260408083208151610140810183528154909516855281516060810192839052939485948594859485948594939092840191600184019060039082845b81548152602001906001019080831161188c5750505091835250506004820154602082015260058201546040820152600682015460ff908116151560608084019190915260078401546080840152600884015460a0840152600984015460c0840152600a840154909116151560e0830152600b909201546101009091015281015190915060009061191d9042612870565b90508160a001518260c0015160008311611938576000611948565b828460a00151611948919061285c565b608085015180611959576000611995565b42610258876060015161196c91906126f0565b11611978576000611995565b42610258876060015161198b91906126f0565b6119959190612870565b939c929b5090995097509095509350505050565b6119b1611ff0565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038082166000908152600560209081526040808320815161014081018352815490951685528151606081019092529293849384938493908301906001830160038282826020028201915b815481526020019060010190808311611a245750505091835250506004820154602082015260058201546040820152600682015460ff9081161515606083015260078301546080830152600883015460a0830152600983015460c0830152600a83015416151560e0820152600b9091015461010090910152610120810151909150600090421015611ac35742826101200151611ac09190612870565b90505b6101008201516101209092015191969195509350915050565b6001600160a01b0381811660009081526005602090815260408083208151610140810183528154909516855281516060810192839052939485949093919291840191600184019060039082845b815481526020019060010190808311611b295750505091835250506004820154602082015260058201546040820152600682015460ff908116151560608301526007830154608080840191909152600884015460a0840152600984015460c0840152600a840154909116151560e0830152600b90920154610100909101528101519091508015611bbb57508061010001515b8015611bcc57508061012001514210155b8015611be857506102588160600151611be591906126f0565b42105b9392505050565b3360009081526005602052604090206006015460ff16611c215760405162461bcd60e51b8152600401610562906126af565b61169333611e9f565b611c32611ff0565b6001600160a01b038116611c5c57604051631e4fbdf760e01b815260006004820152602401610562565b61102681612047565b336000908152600560205260409020600681015460ff16611c985760405162461bcd60e51b8152600401610562906126af565b600a81015460ff16611ce55760405162461bcd60e51b81526020600482015260166024820152754175746f206d696e696e67206e6f742061637469766560501b6044820152606401610562565b600a8101805460ff199081169091556000600b83018190553380825260086020526040808320805490941690935591517f84abe2cabf8cc6984b22564b10b65046a08b87cb8b9fd5773f79c2ecb6c4ad609190a250565b60004244338686865a6040805160208101989098528701959095526bffffffffffffffffffffffff19606094851b16938601939093526074850191909152609484015260b483015260d482015260f40160408051601f198184030181529190528051602090910120949350505050565b608081015160a08201516000918291611dc6908290612870565b611dd19060016126f0565b611ddb90876128d1565b611de591906126f0565b90506000611df7828560600151612097565b905080611e0957600092505050611be8565b600354606085015160405163937a79e960e01b81526000926001600160a01b03169163937a79e991611e3f918a916004016128fb565b602060405180830381865afa158015611e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e80919061292d565b90506000611e90612710896128d1565b91909110979650505050505050565b6001600160a01b0381166000908152600560205260409020600a81015460ff1615611f1c57600a8101805460ff199081169091556001600160a01b0383166000818152600860205260408082208054909416909355915190917f84abe2cabf8cc6984b22564b10b65046a08b87cb8b9fd5773f79c2ecb6c4ad6091a25b62015f90816007015410611f8c576004805460405163df49f66360e01b81526001600160a01b038581169382019390935291169063df49f66390602401600060405180830381600087803b158015611f7357600080fd5b505af1158015611f87573d6000803e3d6000fd5b505050505b6007810154600882015460408051928352602083019190915242908201526001600160a01b038316907f30ebaf65053c3d3dcb19581e2fa3f0e804b68a504ed415604a2deeca636dd9279060600160405180910390a2600601805460ff1916905550565b6000546001600160a01b031633146116935760405163118cdaa760e01b8152336004820152602401610562565b60026001540361204057604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808260048111156120ac576120ac6128e5565b036120c4576120bc6002846128d1565b159050610c3e565b60018260048111156120d8576120d86128e5565b036120f2576120e86002846128d1565b6001149050610c3e565b6002826004811115612106576121066128e5565b0361211b5761211483612168565b9050610c3e565b600382600481111561212f5761212f6128e5565b0361213d57612114836121ed565b6004826004811115612151576121516128e5565b0361215f576121148361223a565b50600092915050565b6000600282101561217b57506000919050565b8160020361218b57506001919050565b6121966002836128d1565b6000036121a557506000919050565b60035b826121b382806128ba565b116121e4576121c281846128d1565b6000036121d25750600092915050565b6121dd6002826126f0565b90506121a8565b50600192915050565b6000806121f98361226c565b905061222081604051806040016040528060038152602001620ccc4d60ea1b815250612375565b80611be8575061223261013a846128d1565b159392505050565b60008160000361224c57506001919050565b600061225783612454565b90508261226482806128ba565b149392505050565b6060816000036122935750506040805180820190915260018152600360fc1b602082015290565b8160005b81156122bd57806122a781612812565b91506122b69050600a8361285c565b9150612297565b60008167ffffffffffffffff8111156122d8576122d8612703565b6040519080825280601f01601f191660200182016040528015612302576020820181803683370190505b5090505b841561236d57612317600183612870565b9150612324600a866128d1565b61232f9060306126f0565b60f81b818381518110612344576123446127fc565b60200101906001600160f81b031916908160001a905350612366600a8661285c565b9450612306565b949350505050565b8151815160009184918491101561239157600092505050610c3e565b60005b815183516123a29190612870565b811161244857600160005b8351811015612421578381815181106123c8576123c86127fc565b01602001516001600160f81b031916856123e283866126f0565b815181106123f2576123f26127fc565b01602001516001600160f81b0319161461240f5760009150612421565b8061241981612812565b9150506123ad565b508015612435576001945050505050610c3e565b508061244081612812565b915050612394565b50600095945050505050565b60008160000361246657506000919050565b6001608083901c1561247d5760809290921c9160401b5b604083901c156124925760409290921c9160201b5b602083901c156124a75760209290921c9160101b5b601083901c156124bc5760109290921c9160081b5b600883901c156124d15760089290921c9160041b5b600483901c156124e65760049290921c9160021b5b600283901c15610c3e5760011b92915050565b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b8260038101928215612568579160200282015b8281111561256857825182559160200191906001019061254d565b50612574929150612578565b5090565b5b808211156125745760008155600101612579565b6001600160a01b038116811461102657600080fd5b6000602082840312156125b457600080fd5b8135611be88161258d565b600080604083850312156125d257600080fd5b82356125dd8161258d565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561266157815180516001600160a01b03168552868101518786015285810151868601526060808201519086015260808082015115159086015260a0908101519085015260c09093019290850190600101612608565b5091979650505050505050565b60006060828403121561268057600080fd5b8260608301111561269057600080fd5b50919050565b6000602082840312156126a857600080fd5b5035919050565b60208082526011908201527027379030b1ba34bb329039b2b9b9b4b7b760791b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c3e57610c3e6126da565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff8111828210171561274b57634e487b7160e01b600052604160045260246000fd5b60405290565b80516005811061276057600080fd5b919050565b8051801515811461276057600080fd5b6000610120828403121561278857600080fd5b612790612719565b8251815260208301516020820152604083015160408201526127b460608401612751565b60608201526080830151608082015260a083015160a08201526127d960c08401612765565b60c082015260e08381015190820152610100928301519281019290925250919050565b634e487b7160e01b600052603260045260246000fd5b600060018201612824576128246126da565b5060010190565b60006020828403121561283d57600080fd5b611be882612765565b634e487b7160e01b600052601260045260246000fd5b60008261286b5761286b612846565b500490565b81810381811115610c3e57610c3e6126da565b60006020828403121561289557600080fd5b8151611be88161258d565b60a081016060858337606082019390935260800152919050565b8082028115828204841417610c3e57610c3e6126da565b6000826128e0576128e0612846565b500690565b634e487b7160e01b600052602160045260246000fd5b828152604081016005831061292057634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60006020828403121561293f57600080fd5b505191905056fea2646970667358221220115817f0efa44d4db64f8142786859429cfdefb5d8677e388c6ccd4aad9ce43164736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1991,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5226,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "gameManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(GameManager)4584"
      },
      {
        "astId": 5229,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "minerNFT",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MinerNFT)5212"
      },
      {
        "astId": 5232,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "rewardManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(RewardManager)7624"
      },
      {
        "astId": 5285,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "activeSessions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(MiningSession)5255_storage)"
      },
      {
        "astId": 5291,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "miningHistory",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(MiningAttempt)5268_storage)dyn_storage)"
      },
      {
        "astId": 5295,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "playerTotalSuccesses",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5299,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "autoMiningEnabled",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MiningAttempt)5268_storage)dyn_storage": {
        "base": "t_struct(MiningAttempt)5268_storage",
        "encoding": "dynamic_array",
        "label": "struct MiningEngine.MiningAttempt[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameManager)4584": {
        "encoding": "inplace",
        "label": "contract GameManager",
        "numberOfBytes": "20"
      },
      "t_contract(MinerNFT)5212": {
        "encoding": "inplace",
        "label": "contract MinerNFT",
        "numberOfBytes": "20"
      },
      "t_contract(RewardManager)7624": {
        "encoding": "inplace",
        "label": "contract RewardManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(MiningAttempt)5268_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MiningEngine.MiningAttempt[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(MiningAttempt)5268_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(MiningSession)5255_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MiningEngine.MiningSession)",
        "numberOfBytes": "32",
        "value": "t_struct(MiningSession)5255_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MiningAttempt)5268_storage": {
        "encoding": "inplace",
        "label": "struct MiningEngine.MiningAttempt",
        "members": [
          {
            "astId": 5257,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5259,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "nftId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5261,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "roundId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5263,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "randomNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5265,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "success",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 5267,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(MiningSession)5255_storage": {
        "encoding": "inplace",
        "label": "struct MiningEngine.MiningSession",
        "members": [
          {
            "astId": 5234,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5238,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "nftIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 5240,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "roundId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5242,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5244,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "isActive",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 5246,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "totalAttempts",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5248,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "totalSuccesses",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5250,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "lastMiningTime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 5252,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "autoMining",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 5254,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "nextAutoMiningTime",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}