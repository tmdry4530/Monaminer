{
  "address": "0xf0744a33261d7357fEa8658e7a661543A6F3016C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minerNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MiningAttemptMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MiningSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "attemptMining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameManager",
      "outputs": [
        {
          "internalType": "contract GameManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getMiningHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "randomNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct MiningEngine.MiningAttempt[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAttempts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSuccesses",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastMiningTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct MiningEngine.PlayerStats",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getRecentSuccesses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "randomNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct MiningEngine.MiningAttempt[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minerNFT",
      "outputs": [
        {
          "internalType": "contract MinerNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "miningHistory",
      "outputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAttempts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSuccesses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastMiningTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerTotalSuccesses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "contract RewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameManager",
          "type": "address"
        }
      ],
      "name": "setGameManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minerNFT",
          "type": "address"
        }
      ],
      "name": "setMinerNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardManager",
          "type": "address"
        }
      ],
      "name": "setRewardManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fcbf5fd82b6f1643351d8bf95ace698ad0e60d7bec80ba6efbefb8735536012",
  "receipt": {
    "to": null,
    "from": "0x038F9EFF208F4cefc0a7f856739a3405c419A147",
    "contractAddress": "0xf0744a33261d7357fEa8658e7a661543A6F3016C",
    "transactionIndex": 6,
    "gasUsed": "1462500",
    "logsBloom": "0x
    "blockHash": "0x53d9e6e16e9b67d260b04fe18c4af63389fbb4ccd31ed1055b39203fd34a75a0",
    "transactionHash": "0x2fcbf5fd82b6f1643351d8bf95ace698ad0e60d7bec80ba6efbefb8735536012",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 25882959,
        "transactionHash": "0x2fcbf5fd82b6f1643351d8bf95ace698ad0e60d7bec80ba6efbefb8735536012",
        "address": "0xf0744a33261d7357fEa8658e7a661543A6F3016C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000038f9eff208f4cefc0a7f856739a3405c419a147"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x53d9e6e16e9b67d260b04fe18c4af63389fbb4ccd31ed1055b39203fd34a75a0"
      }
    ],
    "blockNumber": 25882959,
    "cumulativeGasUsed": "2252828",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf68eEC3e48a6f80da9107449fB521510e6450748",
    "0xcfCe0fa22212F176B38C2b9435c41f093e15e5bD",
    "0xE0F15D16E0666bC625b938Cd48a636e0506e5A7A"
  ],
  "numDeployments": 5,
  "solcInputHash": "07c2e468804996709e7637c479c5e320",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minerNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MiningAttemptMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MiningSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"attemptMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameManager\",\"outputs\":[{\"internalType\":\"contract GameManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getMiningHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MiningEngine.MiningAttempt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAttempts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSuccesses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMiningTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MiningEngine.PlayerStats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getRecentSuccesses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MiningEngine.MiningAttempt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerNFT\",\"outputs\":[{\"internalType\":\"contract MinerNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miningHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAttempts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSuccesses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMiningTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerTotalSuccesses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract RewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameManager\",\"type\":\"address\"}],\"name\":\"setGameManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minerNFT\",\"type\":\"address\"}],\"name\":\"setMinerNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"name\":\"setRewardManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MiningEngine.sol\":\"MiningEngine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36797469c391ea5ba27408e6ca8adf0824ba6f3adea9c139be18bd6f63232c16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/GameManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./MinerNFT.sol\\\";\\n\\ncontract GameManager is Ownable {\\n    enum PatternType {\\n        EVEN, // \\uc9dd\\uc218\\n        ODD, // \\ud640\\uc218\\n        PRIME, // \\uc18c\\uc218\\n        PI, // \\u03c0 \\uad00\\ub828 (314 \\ud3ec\\ud568/\\ubc30\\uc218)\\n        SQUARE // \\uc644\\uc804\\uc81c\\uacf1\\uc218\\n    }\\n\\n    struct Round {\\n        uint256 roundId;\\n        uint256 startTime;\\n        PatternType pattern;\\n        uint256 minRange;\\n        uint256 maxRange;\\n        bool isActive;\\n    }\\n\\n    uint256 public currentRoundId;\\n    MinerNFT public minerNFT;\\n    mapping(uint256 => Round) public rounds;\\n    bool public initialNFTsMinted; // \\ucd5c\\ucd08 NFT \\ubbfc\\ud305 \\uc5ec\\ubd80\\n\\n    event NewRoundStarted(\\n        uint256 indexed roundId,\\n        PatternType pattern,\\n        uint256 minRange,\\n        uint256 maxRange,\\n        uint256 startTime\\n    );\\n\\n    event RoundEnded(uint256 indexed roundId, uint256 endTime);\\n    event StartingNFTsMinted(uint256 indexed roundId, address indexed recipient, uint256[3] tokenIds);\\n\\n    constructor(address _minerNFT) Ownable(msg.sender) {\\n        minerNFT = MinerNFT(_minerNFT);\\n        initialNFTsMinted = false;\\n        _startNewRound();\\n    }\\n    \\n    // \\ucd08\\uae30\\ud654 \\ud568\\uc218 (\\ubc30\\ud3ec \\ud6c4 \\ubcc4\\ub3c4\\ub85c \\ud638\\ucd9c) - \\ucd5c\\ucd08 \\ud55c\\ubc88\\ub9cc\\n    function initializeWithNFTs() external onlyOwner {\\n        require(!initialNFTsMinted, \\\"Initial NFTs already minted\\\");\\n        _mintStartingNFTs();\\n        initialNFTsMinted = true;\\n    }\\n\\n    function getCurrentRound() external view returns (Round memory) {\\n        return rounds[currentRoundId];\\n    }\\n\\n    function isRoundActive() external view returns (bool) {\\n        if (currentRoundId == 0) return false;\\n        Round memory round = rounds[currentRoundId];\\n        return round.isActive;\\n    }\\n\\n    function startNewRound() external onlyOwner {\\n        _startNewRound();\\n    }\\n\\n    function _startNewRound() internal {\\n        // \\uc774\\uc804 \\ub77c\\uc6b4\\ub4dc \\uc885\\ub8cc\\n        if (currentRoundId > 0) {\\n            rounds[currentRoundId].isActive = false;\\n            emit RoundEnded(currentRoundId, block.timestamp);\\n        }\\n\\n        currentRoundId++;\\n\\n        // \\uc0c8 \\ub77c\\uc6b4\\ub4dc \\ud328\\ud134 \\ubc0f \\ubc94\\uc704 \\uc124\\uc815\\n        (PatternType pattern, uint256 minRange, uint256 maxRange) = _generateRoundParameters();\\n\\n        rounds[currentRoundId] = Round({\\n            roundId: currentRoundId,\\n            startTime: block.timestamp,\\n            pattern: pattern,\\n            minRange: minRange,\\n            maxRange: maxRange,\\n            isActive: true\\n        });\\n\\n        emit NewRoundStarted(currentRoundId, pattern, minRange, maxRange, block.timestamp);\\n    }\\n\\n    function _mintStartingNFTs() internal {\\n        // 3\\uac1c\\uc758 \\ub2e4\\ub978 \\ud0c0\\uc785 NFT \\ubbfc\\ud305 (BalancedScan 3\\uac1c)\\n        MinerNFT.MinerType[] memory minerTypes = new MinerNFT.MinerType[](3);\\n        minerTypes[0] = MinerNFT.MinerType.BALANCED_SCAN;\\n        minerTypes[1] = MinerNFT.MinerType.BALANCED_SCAN;\\n        minerTypes[2] = MinerNFT.MinerType.BALANCED_SCAN;\\n\\n        // \\ubc30\\ud3ec\\uc790(owner)\\uc5d0\\uac8c NFT \\ubbfc\\ud305\\n        uint256[] memory tokenIds = minerNFT.batchMintMiners(owner(), minerTypes);\\n\\n        uint256[3] memory nftIds;\\n        nftIds[0] = tokenIds[0];\\n        nftIds[1] = tokenIds[1];\\n        nftIds[2] = tokenIds[2];\\n\\n        emit StartingNFTsMinted(currentRoundId, owner(), nftIds);\\n    }\\n\\n    function _generateRoundParameters() internal view returns (PatternType, uint256, uint256) {\\n        // \\uc758\\uc0ac \\ub79c\\ub364\\uc73c\\ub85c \\ud328\\ud134\\uacfc \\ubc94\\uc704 \\uc0dd\\uc131\\n        uint256 rand = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, currentRoundId)));\\n\\n        // \\uc644\\uc804 \\ub79c\\ub364\\ud55c \\ud328\\ud134 \\uc120\\ud0dd\\n        PatternType pattern = PatternType(rand % 5);\\n\\n        // \\uc644\\uc804 \\ub79c\\ub364\\ud55c \\ubc94\\uc704 \\uc0dd\\uc131\\n        uint256 baseRange = 30000; // \\ucd5c\\uc18c \\uae30\\uc900\\uac12\\n        uint256 maxRangeSpread = 50000; // \\ucd5c\\ub300 \\ubc94\\uc704 \\ud655\\uc0b0\\n\\n        // \\ub79c\\ub364\\ud55c \\ucd5c\\uc18c\\uac12 \\uc0dd\\uc131 (30,000 ~ 70,000)\\n        uint256 minRange = baseRange + (rand % (maxRangeSpread + 1));\\n\\n        // \\ub79c\\ub364\\ud55c \\ubc94\\uc704 \\ud06c\\uae30 \\uc0dd\\uc131 (10,000 ~ 30,000)\\n        uint256 rangeSize = 10000 + ((rand >> 8) % 20001);\\n        uint256 maxRange = minRange + rangeSize;\\n\\n        return (pattern, minRange, maxRange);\\n    }\\n\\n    // \\ub77c\\uc6b4\\ub4dc \\uc218\\ub3d9 \\uc885\\ub8cc (\\uad00\\ub9ac\\uc790\\ub9cc)\\n    function endCurrentRound() external onlyOwner {\\n        require(rounds[currentRoundId].isActive, \\\"Round not active\\\");\\n        \\n        rounds[currentRoundId].isActive = false;\\n        emit RoundEnded(currentRoundId, block.timestamp);\\n    }\\n\\n    function getRoundHistory(uint256 count) external view returns (Round[] memory) {\\n        uint256 startId = currentRoundId > count ? currentRoundId - count + 1 : 1;\\n        uint256 actualCount = currentRoundId - startId + 1;\\n\\n        Round[] memory history = new Round[](actualCount);\\n        for (uint256 i = 0; i < actualCount; i++) {\\n            history[i] = rounds[startId + i];\\n        }\\n\\n        return history;\\n    }\\n}\\n\",\"keccak256\":\"0x1ec10f74821d44c7e1df7c81f57f5d4ee57c730e6a63827aab166cf5f68288fa\",\"license\":\"MIT\"},\"contracts/MinerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./GameManager.sol\\\";\\n\\ncontract MinerNFT is ERC721, ERC721Enumerable, Ownable {\\n    enum MinerType {\\n        EVEN_BLASTER, // EvenBlaster\\n        PRIME_SNIPER, // PrimeSniper\\n        BALANCED_SCAN, // BalancedScan\\n        PI_SNIPER, // PiSniper\\n        SQUARE_SEEKER // SquareSeeker\\n    }\\n\\n    struct MinerStats {\\n        MinerType minerType;\\n        uint256 minRange;\\n        uint256 maxRange;\\n        GameManager.PatternType specialization;\\n        uint256 baseSuccessRate; // \\uc131\\uacf5\\ub960 (10000 = 100%)\\n        string name;\\n    }\\n\\n    uint256 private _nextTokenId = 1;\\n    mapping(uint256 => MinerStats) public minerStats;\\n\\n    // \\ucc44\\uad74\\uae30\\ubcc4 \\uc124\\uc815 (PRD \\uae30\\uc900)\\n    mapping(MinerType => MinerStats) public minerConfig;\\n    \\n    // \\ubbfc\\ud305 \\uad8c\\ud55c \\uad00\\ub9ac\\n    mapping(address => bool) public authorizedMinters;\\n\\n    event MinerMinted(address indexed to, uint256 indexed tokenId, MinerType minerType, string name);\\n    event MinterAuthorized(address indexed minter, bool authorized);\\n    \\n    modifier onlyAuthorizedMinter() {\\n        require(authorizedMinters[msg.sender] || msg.sender == owner(), \\\"Not authorized to mint\\\");\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"Monaminer NFT\\\", \\\"MINER\\\") Ownable(msg.sender) {\\n        _initializeMinerConfigs();\\n    }\\n\\n    function _initializeMinerConfigs() private {\\n        // EvenBlaster NFT\\n        minerConfig[MinerType.EVEN_BLASTER] = MinerStats({\\n            minerType: MinerType.EVEN_BLASTER,\\n            minRange: 40000,\\n            maxRange: 60000,\\n            specialization: GameManager.PatternType.EVEN,\\n            baseSuccessRate: 15, // 0.015%\\n            name: \\\"EvenBlaster\\\"\\n        });\\n\\n        // PrimeSniper NFT\\n        minerConfig[MinerType.PRIME_SNIPER] = MinerStats({\\n            minerType: MinerType.PRIME_SNIPER,\\n            minRange: 74000,\\n            maxRange: 80000,\\n            specialization: GameManager.PatternType.PRIME,\\n            baseSuccessRate: 12, // 0.012%\\n            name: \\\"PrimeSniper\\\"\\n        });\\n\\n        // BalancedScan NFT (\\ubc94\\uc6a9)\\n        minerConfig[MinerType.BALANCED_SCAN] = MinerStats({\\n            minerType: MinerType.BALANCED_SCAN,\\n            minRange: 50000,\\n            maxRange: 70000,\\n            specialization: GameManager.PatternType.EVEN, // \\ubaa8\\ub4e0 \\ud328\\ud134\\uc5d0 \\ub300\\uc751\\n            baseSuccessRate: 8, // 0.008%\\n            name: \\\"BalancedScan\\\"\\n        });\\n\\n        // PiSniper NFT\\n        minerConfig[MinerType.PI_SNIPER] = MinerStats({\\n            minerType: MinerType.PI_SNIPER,\\n            minRange: 60000,\\n            maxRange: 70000,\\n            specialization: GameManager.PatternType.PI,\\n            baseSuccessRate: 12, // 0.012%\\n            name: \\\"PiSniper\\\"\\n        });\\n\\n        // SquareSeeker NFT\\n        minerConfig[MinerType.SQUARE_SEEKER] = MinerStats({\\n            minerType: MinerType.SQUARE_SEEKER,\\n            minRange: 30000,\\n            maxRange: 50000,\\n            specialization: GameManager.PatternType.SQUARE,\\n            baseSuccessRate: 14, // 0.014%\\n            name: \\\"SquareSeeker\\\"\\n        });\\n    }\\n\\n    function mintMiner(address to, MinerType minerType) external onlyAuthorizedMinter returns (uint256) {\\n        uint256 tokenId = _nextTokenId++;\\n\\n        MinerStats memory config = minerConfig[minerType];\\n        minerStats[tokenId] = config;\\n\\n        _safeMint(to, tokenId);\\n\\n        emit MinerMinted(to, tokenId, minerType, config.name);\\n\\n        return tokenId;\\n    }\\n\\n    function batchMintMiners(\\n        address to,\\n        MinerType[] calldata minerTypes\\n    ) external onlyAuthorizedMinter returns (uint256[] memory) {\\n        uint256[] memory tokenIds = new uint256[](minerTypes.length);\\n\\n        for (uint256 i = 0; i < minerTypes.length; i++) {\\n            uint256 tokenId = _nextTokenId++;\\n\\n            MinerStats memory config = minerConfig[minerTypes[i]];\\n            minerStats[tokenId] = config;\\n\\n            _safeMint(to, tokenId);\\n\\n            emit MinerMinted(to, tokenId, minerTypes[i], config.name);\\n            tokenIds[i] = tokenId;\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    // \\ubbfc\\ud305 \\uad8c\\ud55c \\uc124\\uc815 \\ud568\\uc218\\n    function setMinter(address minter, bool authorized) external onlyOwner {\\n        authorizedMinters[minter] = authorized;\\n        emit MinterAuthorized(minter, authorized);\\n    }\\n    \\n    // \\uc5ec\\ub7ec minter\\ub97c \\ud55c\\ubc88\\uc5d0 \\uc124\\uc815\\n    function setMultipleMinters(address[] calldata minters, bool authorized) external onlyOwner {\\n        for (uint256 i = 0; i < minters.length; i++) {\\n            authorizedMinters[minters[i]] = authorized;\\n            emit MinterAuthorized(minters[i], authorized);\\n        }\\n    }\\n\\n    function getMinerStats(uint256 tokenId) external view returns (MinerStats memory) {\\n        require(_ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\n        return minerStats[tokenId];\\n    }\\n\\n    function getOwnedMiners(address owner) external view returns (uint256[] memory) {\\n        uint256 balance = balanceOf(owner);\\n        uint256[] memory tokens = new uint256[](balance);\\n\\n        for (uint256 i = 0; i < balance; i++) {\\n            tokens[i] = tokenOfOwnerByIndex(owner, i);\\n        }\\n\\n        return tokens;\\n    }\\n\\n    function getMinerTypeStats(MinerType minerType) external view returns (MinerStats memory) {\\n        return minerConfig[minerType];\\n    }\\n\\n    function calculateEffectiveSuccessRate(\\n        uint256 tokenId,\\n        GameManager.PatternType currentPattern\\n    ) external view returns (uint256) {\\n        require(_ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\n\\n        MinerStats memory stats = minerStats[tokenId];\\n\\n        // BalancedScan\\uc740 \\ubaa8\\ub4e0 \\ud328\\ud134\\uc5d0 \\ub3d9\\uc77c\\ud55c \\uc131\\uacf5\\ub960\\n        if (stats.minerType == MinerType.BALANCED_SCAN) {\\n            return stats.baseSuccessRate;\\n        }\\n\\n        // \\ud2b9\\ud654 \\ud328\\ud134\\uacfc \\uc77c\\uce58\\ud558\\uba74 \\uae30\\ubcf8 \\uc131\\uacf5\\ub960, \\uc544\\ub2c8\\uba74 \\uc808\\ubc18\\n        if (stats.specialization == currentPattern) {\\n            return stats.baseSuccessRate;\\n        } else {\\n            return stats.baseSuccessRate / 2;\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_ownerOf(tokenId) != address(0), \\\"Token does not exist\\\");\\n\\n        MinerStats memory stats = minerStats[tokenId];\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://api.monaminer.com/nft/\\\",\\n                    Strings.toString(uint256(stats.minerType)),\\n                    \\\"/\\\",\\n                    Strings.toString(tokenId)\\n                )\\n            );\\n    }\\n\\n    // Override required functions\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721, ERC721Enumerable) returns (address) {\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    function _increaseBalance(address account, uint128 value) internal override(ERC721, ERC721Enumerable) {\\n        super._increaseBalance(account, value);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9c90e984057bba3040bf0fb949cb98e6463d93bff61df4835d0c56d266ff1635\",\"license\":\"MIT\"},\"contracts/MiningEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./GameManager.sol\\\";\\nimport \\\"./MinerNFT.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\n\\ncontract MiningEngine is Ownable, ReentrancyGuard {\\n    GameManager public gameManager;\\n    MinerNFT public minerNFT;\\n    RewardManager public rewardManager;\\n\\n    struct PlayerStats {\\n        uint256 totalAttempts;\\n        uint256 totalSuccesses;\\n        uint256 lastMiningTime;\\n    }\\n\\n    struct MiningAttempt {\\n        address player;\\n        uint256 nftId;\\n        uint256 roundId;\\n        uint256 randomNumber;\\n        bool success;\\n        uint256 timestamp;\\n    }\\n\\n    mapping(address => PlayerStats) public playerStats;\\n    mapping(address => MiningAttempt[]) public miningHistory;\\n    mapping(address => uint256) public playerTotalSuccesses;\\n\\n    event MiningAttemptMade(\\n        address indexed player,\\n        uint256 indexed nftId,\\n        uint256 randomNumber,\\n        bool success,\\n        uint256 roundId,\\n        uint256 timestamp\\n    );\\n\\n    event MiningSuccess(\\n        address indexed player,\\n        uint256 indexed nftId,\\n        uint256 randomNumber,\\n        uint256 roundId,\\n        uint256 timestamp\\n    );\\n\\n    constructor(address _gameManager, address _minerNFT, address _rewardManager) Ownable(msg.sender) {\\n        gameManager = GameManager(_gameManager);\\n        minerNFT = MinerNFT(_minerNFT);\\n        rewardManager = RewardManager(_rewardManager);\\n    }\\n\\n    // \\uc624\\ud504\\uccb4\\uc778\\uc5d0\\uc11c NFT ID\\ub97c \\ubcf4\\ub0b4\\uc11c \\ucc44\\uad74 \\uc2dc\\ub3c4\\n    function attemptMining(uint256 nftId) external nonReentrant {\\n        require(gameManager.isRoundActive(), \\\"No active round\\\");\\n        require(minerNFT.ownerOf(nftId) == msg.sender, \\\"Not NFT owner\\\");\\n\\n        GameManager.Round memory currentRound = gameManager.getCurrentRound();\\n\\n        // NFT ID \\uae30\\ubc18 \\ub09c\\uc218 \\uc0dd\\uc131\\n        uint256 randomNumber = _generateRandomNumber(nftId);\\n\\n        // \\ucc44\\uad74 \\uc131\\uacf5 \\uc5ec\\ubd80 \\ud655\\uc778\\n        bool success = _checkMiningSuccess(randomNumber, nftId, currentRound);\\n\\n        // \\ud1b5\\uacc4 \\uc5c5\\ub370\\uc774\\ud2b8\\n        playerStats[msg.sender].totalAttempts++;\\n        playerStats[msg.sender].lastMiningTime = block.timestamp;\\n\\n        // \\ucc44\\uad74 \\uae30\\ub85d \\uc800\\uc7a5\\n        miningHistory[msg.sender].push(\\n            MiningAttempt({\\n                player: msg.sender,\\n                nftId: nftId,\\n                roundId: currentRound.roundId,\\n                randomNumber: randomNumber,\\n                success: success,\\n                timestamp: block.timestamp\\n            })\\n        );\\n\\n        emit MiningAttemptMade(msg.sender, nftId, randomNumber, success, currentRound.roundId, block.timestamp);\\n\\n        if (success) {\\n            playerStats[msg.sender].totalSuccesses++;\\n            playerTotalSuccesses[msg.sender]++;\\n\\n            // RewardManager\\uc5d0\\uc11c \\ubcf4\\uc0c1 \\uc9c0\\uae09\\n            rewardManager.distributeBasicReward(msg.sender);\\n\\n            emit MiningSuccess(msg.sender, nftId, randomNumber, currentRound.roundId, block.timestamp);\\n\\n            // \\uc644\\uc8fc \\ubcf4\\ub108\\uc2a4 \\uccb4\\ud06c (1000\\ud68c \\uc131\\uacf5)\\n            if (playerTotalSuccesses[msg.sender] >= 1000) {\\n                rewardManager.distributeCompletionBonus(msg.sender);\\n            }\\n        }\\n    }\\n\\n    function _generateRandomNumber(uint256 nftId) internal view returns (uint256) {\\n        // NFT ID\\uc640 \\ube14\\ub85d \\ub370\\uc774\\ud130\\ub97c \\uc870\\ud569\\ud55c \\ub09c\\uc218 \\uc0dd\\uc131\\n        return uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender, nftId, gasleft())));\\n    }\\n\\n    function _checkMiningSuccess(\\n        uint256 randomNumber,\\n        uint256 nftId,\\n        GameManager.Round memory round\\n    ) internal view returns (bool) {\\n        // \\ubc94\\uc704 \\uccb4\\ud06c\\n        uint256 targetNumber = (randomNumber % (round.maxRange - round.minRange + 1)) + round.minRange;\\n\\n        // \\ud328\\ud134 \\uccb4\\ud06c\\n        bool patternMatch = _checkPattern(targetNumber, round.pattern);\\n        if (!patternMatch) {\\n            return false;\\n        }\\n\\n        // \\uc131\\uacf5\\ub960 \\uccb4\\ud06c\\n        uint256 effectiveSuccessRate = minerNFT.calculateEffectiveSuccessRate(nftId, round.pattern);\\n        uint256 successThreshold = (randomNumber % 10000);\\n\\n        return successThreshold < effectiveSuccessRate;\\n    }\\n\\n    function _checkPattern(uint256 number, GameManager.PatternType pattern) internal pure returns (bool) {\\n        if (pattern == GameManager.PatternType.EVEN) {\\n            return number % 2 == 0;\\n        } else if (pattern == GameManager.PatternType.ODD) {\\n            return number % 2 == 1;\\n        } else if (pattern == GameManager.PatternType.PRIME) {\\n            return _isPrime(number);\\n        } else if (pattern == GameManager.PatternType.PI) {\\n            return _isPiRelated(number);\\n        } else if (pattern == GameManager.PatternType.SQUARE) {\\n            return _isPerfectSquare(number);\\n        }\\n        return false;\\n    }\\n\\n    function _isPrime(uint256 n) internal pure returns (bool) {\\n        if (n < 2) return false;\\n        if (n == 2) return true;\\n        if (n % 2 == 0) return false;\\n\\n        for (uint256 i = 3; i * i <= n; i += 2) {\\n            if (n % i == 0) return false;\\n        }\\n        return true;\\n    }\\n\\n    function _isPiRelated(uint256 n) internal pure returns (bool) {\\n        // 314\\ub97c \\ud3ec\\ud568\\ud558\\uac70\\ub098 314\\uc758 \\ubc30\\uc218\\n        string memory numStr = _toString(n);\\n        return _contains(numStr, \\\"314\\\") || n % 314 == 0;\\n    }\\n\\n    function _isPerfectSquare(uint256 n) internal pure returns (bool) {\\n        if (n == 0) return true;\\n        uint256 sqrt = _sqrt(n);\\n        return sqrt * sqrt == n;\\n    }\\n\\n    function _sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 result = 1;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n        return result;\\n    }\\n\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function _contains(string memory str, string memory substr) internal pure returns (bool) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory substrBytes = bytes(substr);\\n\\n        if (substrBytes.length > strBytes.length) return false;\\n\\n        for (uint256 i = 0; i <= strBytes.length - substrBytes.length; i++) {\\n            bool found = true;\\n            for (uint256 j = 0; j < substrBytes.length; j++) {\\n                if (strBytes[i + j] != substrBytes[j]) {\\n                    found = false;\\n                    break;\\n                }\\n            }\\n            if (found) return true;\\n        }\\n        return false;\\n    }\\n\\n    // \\uc870\\ud68c \\ud568\\uc218\\ub4e4\\n    function getPlayerStats(address player) external view returns (PlayerStats memory) {\\n        return playerStats[player];\\n    }\\n\\n    function getMiningHistory(address player, uint256 limit) external view returns (MiningAttempt[] memory) {\\n        MiningAttempt[] memory history = miningHistory[player];\\n        if (limit == 0 || limit > history.length) {\\n            return history;\\n        }\\n\\n        MiningAttempt[] memory limitedHistory = new MiningAttempt[](limit);\\n        uint256 startIndex = history.length - limit;\\n        for (uint256 i = 0; i < limit; i++) {\\n            limitedHistory[i] = history[startIndex + i];\\n        }\\n        return limitedHistory;\\n    }\\n\\n    function getRecentSuccesses(address player, uint256 count) external view returns (MiningAttempt[] memory) {\\n        MiningAttempt[] memory history = miningHistory[player];\\n        uint256 successCount = 0;\\n        uint256 totalCount = 0;\\n\\n        // \\ucd5c\\uadfc \\uc131\\uacf5 \\uc0ac\\ub840\\ub9cc \\ud544\\ud130\\ub9c1\\n        for (uint256 i = history.length; i > 0 && successCount < count; i--) {\\n            if (history[i - 1].success) {\\n                successCount++;\\n            }\\n            totalCount++;\\n        }\\n\\n        MiningAttempt[] memory successes = new MiningAttempt[](successCount);\\n        uint256 successIndex = 0;\\n\\n        for (uint256 i = history.length - totalCount; i < history.length && successIndex < successCount; i++) {\\n            if (history[i].success) {\\n                successes[successIndex] = history[i];\\n                successIndex++;\\n            }\\n        }\\n\\n        return successes;\\n    }\\n\\n    // Admin functions\\n    function setGameManager(address _gameManager) external onlyOwner {\\n        gameManager = GameManager(_gameManager);\\n    }\\n\\n    function setMinerNFT(address _minerNFT) external onlyOwner {\\n        minerNFT = MinerNFT(_minerNFT);\\n    }\\n\\n    function setRewardManager(address _rewardManager) external onlyOwner {\\n        rewardManager = RewardManager(_rewardManager);\\n    }\\n}\\n\",\"keccak256\":\"0xd9618ad392a8fb83e6e8f6908bdacaeb32e26e8b5f76f938191a4c51fee5fd62\",\"license\":\"MIT\"},\"contracts/RewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract RewardManager is Ownable, ReentrancyGuard {\\n    IERC20 public mmToken;\\n\\n    uint256 public constant BASIC_REWARD = 30 ether; // 30 MM per success\\n    uint256 public constant COMPLETION_BONUS = 500 ether; // 500 MM for completion\\n    uint256 public constant DEV_FEE_PERCENT = 10; // 10% dev fee\\n\\n    address public devWallet;\\n    address public miningEngine;\\n\\n    struct RewardStats {\\n        uint256 totalBasicRewards;\\n        uint256 totalCompletionBonuses;\\n        uint256 totalDevFees;\\n        uint256 totalDistributed;\\n    }\\n\\n    mapping(address => uint256) public playerTotalEarned;\\n    mapping(address => uint256) public playerBasicRewards;\\n    mapping(address => uint256) public playerCompletionBonuses;\\n\\n    RewardStats public rewardStats;\\n\\n    event BasicRewardDistributed(address indexed player, uint256 amount, uint256 devFee, uint256 timestamp);\\n\\n    event CompletionBonusDistributed(address indexed player, uint256 amount, uint256 timestamp);\\n\\n    event DevFeeCollected(address indexed devWallet, uint256 amount, uint256 timestamp);\\n\\n    modifier onlyMiningEngine() {\\n        require(msg.sender == miningEngine, \\\"Only mining engine\\\");\\n        _;\\n    }\\n\\n    constructor(address _mmToken, address _devWallet) Ownable(msg.sender) {\\n        mmToken = IERC20(_mmToken);\\n        devWallet = _devWallet;\\n    }\\n\\n    function distributeBasicReward(address player) external onlyMiningEngine nonReentrant {\\n        require(player != address(0), \\\"Invalid player address\\\");\\n\\n        uint256 devFee = (BASIC_REWARD * DEV_FEE_PERCENT) / 100;\\n        uint256 playerReward = BASIC_REWARD - devFee;\\n\\n        // \\ud50c\\ub808\\uc774\\uc5b4\\uc5d0\\uac8c \\ubcf4\\uc0c1 \\uc9c0\\uae09\\n        require(mmToken.transfer(player, playerReward), \\\"Player reward transfer failed\\\");\\n\\n        // \\uac1c\\ubc1c\\ud300\\uc5d0\\uac8c \\uc218\\uc218\\ub8cc \\uc9c0\\uae09\\n        require(mmToken.transfer(devWallet, devFee), \\\"Dev fee transfer failed\\\");\\n\\n        // \\ud1b5\\uacc4 \\uc5c5\\ub370\\uc774\\ud2b8\\n        playerTotalEarned[player] += playerReward;\\n        playerBasicRewards[player] += playerReward;\\n\\n        rewardStats.totalBasicRewards += playerReward;\\n        rewardStats.totalDevFees += devFee;\\n        rewardStats.totalDistributed += BASIC_REWARD;\\n\\n        emit BasicRewardDistributed(player, playerReward, devFee, block.timestamp);\\n        emit DevFeeCollected(devWallet, devFee, block.timestamp);\\n    }\\n\\n    function distributeCompletionBonus(address player) external onlyMiningEngine nonReentrant {\\n        require(player != address(0), \\\"Invalid player address\\\");\\n\\n        // \\uc644\\uc8fc \\ubcf4\\ub108\\uc2a4\\ub294 \\uac1c\\ubc1c\\ud300 \\uc218\\uc218\\ub8cc \\uc5c6\\uc774 \\uc804\\uc561 \\uc9c0\\uae09\\n        require(mmToken.transfer(player, COMPLETION_BONUS), \\\"Completion bonus transfer failed\\\");\\n\\n        // \\ud1b5\\uacc4 \\uc5c5\\ub370\\uc774\\ud2b8\\n        playerTotalEarned[player] += COMPLETION_BONUS;\\n        playerCompletionBonuses[player] += COMPLETION_BONUS;\\n\\n        rewardStats.totalCompletionBonuses += COMPLETION_BONUS;\\n        rewardStats.totalDistributed += COMPLETION_BONUS;\\n\\n        emit CompletionBonusDistributed(player, COMPLETION_BONUS, block.timestamp);\\n    }\\n\\n    function batchDistributeRewards(address[] calldata players, uint256[] calldata amounts) external onlyOwner {\\n        require(players.length == amounts.length, \\\"Arrays length mismatch\\\");\\n\\n        for (uint256 i = 0; i < players.length; i++) {\\n            require(mmToken.transfer(players[i], amounts[i]), \\\"Batch transfer failed\\\");\\n            playerTotalEarned[players[i]] += amounts[i];\\n            rewardStats.totalDistributed += amounts[i];\\n        }\\n    }\\n\\n    function emergencyWithdraw(address to, uint256 amount) external onlyOwner {\\n        require(mmToken.transfer(to, amount), \\\"Emergency withdrawal failed\\\");\\n    }\\n\\n    function getPlayerStats(\\n        address player\\n    ) external view returns (uint256 totalEarned, uint256 basicRewards, uint256 completionBonuses) {\\n        return (playerTotalEarned[player], playerBasicRewards[player], playerCompletionBonuses[player]);\\n    }\\n\\n    function getContractBalance() external view returns (uint256) {\\n        return mmToken.balanceOf(address(this));\\n    }\\n\\n    function simulateROI(\\n        uint256 investmentCost,\\n        uint256 expectedSuccesses,\\n        bool willComplete\\n    ) external pure returns (uint256 totalRevenue, uint256 netProfit, uint256 roiPercent) {\\n        uint256 completionBonusTotal = willComplete ? COMPLETION_BONUS : 0;\\n\\n        totalRevenue =\\n            (expectedSuccesses * (BASIC_REWARD - (BASIC_REWARD * DEV_FEE_PERCENT) / 100)) +\\n            completionBonusTotal;\\n\\n        if (totalRevenue >= investmentCost) {\\n            netProfit = totalRevenue - investmentCost;\\n            roiPercent = (netProfit * 100) / investmentCost;\\n        } else {\\n            netProfit = 0;\\n            roiPercent = 0;\\n        }\\n\\n        return (totalRevenue, netProfit, roiPercent);\\n    }\\n\\n    function calculateRevenueProjection(\\n        uint256 successCount,\\n        bool completedMining\\n    ) external pure returns (uint256 totalPlayerReward, uint256 totalDevFee, uint256 totalCost) {\\n        uint256 basicRewardTotal = successCount * BASIC_REWARD;\\n        uint256 completionBonusTotal = completedMining ? COMPLETION_BONUS : 0;\\n\\n        totalPlayerReward =\\n            (successCount * (BASIC_REWARD - (BASIC_REWARD * DEV_FEE_PERCENT) / 100)) +\\n            completionBonusTotal;\\n        totalDevFee = (successCount * (BASIC_REWARD * DEV_FEE_PERCENT)) / 100;\\n        totalCost = basicRewardTotal + completionBonusTotal;\\n\\n        return (totalPlayerReward, totalDevFee, totalCost);\\n    }\\n\\n    // Admin functions\\n    function setMMToken(address _mmToken) external onlyOwner {\\n        mmToken = IERC20(_mmToken);\\n    }\\n\\n    function setDevWallet(address _devWallet) external onlyOwner {\\n        devWallet = _devWallet;\\n    }\\n\\n    function setMiningEngine(address _miningEngine) external onlyOwner {\\n        miningEngine = _miningEngine;\\n    }\\n\\n    function fundContract(uint256 amount) external onlyOwner {\\n        require(mmToken.transferFrom(msg.sender, address(this), amount), \\\"Funding failed\\\");\\n    }\\n\\n    function getDetailedStats()\\n        external\\n        view\\n        returns (RewardStats memory stats, uint256 contractBalance, uint256 totalPlayers)\\n    {\\n        return (\\n            rewardStats,\\n            mmToken.balanceOf(address(this)),\\n            0 // totalPlayers\\ub294 \\ubcc4\\ub3c4 \\uce74\\uc6b4\\ud130 \\ud544\\uc694\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x15f9a3006562905f5d4b01684fb3f40b183ea6f63fcd87d4d5d3c66d9d8e4ebf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018953803806200189583398101604081905262000034916200011b565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006681620000ae565b5060018055600280546001600160a01b039485166001600160a01b03199182161790915560038054938516938216939093179092556004805491909316911617905562000165565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200011657600080fd5b919050565b6000806000606084860312156200013157600080fd5b6200013c84620000fe565b92506200014c60208501620000fe565b91506200015c60408501620000fe565b90509250925092565b61172080620001756000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063c6b0526611610066578063c6b052661461027e578063cdafbbb614610291578063e4f49d21146102db578063f2fde38b146102ee57600080fd5b80638da5cb5b14610219578063996a0b5b1461022a578063b7127e4114610258578063c4d137c61461026b57600080fd5b80634eff2240116100d35780634eff22401461017d5780634fd66eae146101c9578063715018a6146101fe5780638387b99d1461020657600080fd5b80630f4ef8a614610105578063153ee5541461013557806326ea71c21461014a5780634da3255d1461016a575b600080fd5b600454610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101486101433660046113c8565b610301565b005b61015d6101583660046113e5565b61032b565b60405161012c9190611411565b6101486101783660046113c8565b6104ca565b61019061018b3660046113e5565b6104f4565b604080516001600160a01b03909716875260208701959095529385019290925260608401521515608083015260a082015260c00161012c565b6101dc6101d73660046113c8565b610558565b604080518251815260208084015190820152918101519082015260600161012c565b6101486105be565b61015d6102143660046113e5565b6105d2565b6000546001600160a01b0316610118565b61024a6102383660046113c8565b60076020526000908152604090205481565b60405190815260200161012c565b6101486102663660046113c8565b610803565b600354610118906001600160a01b031681565b600254610118906001600160a01b031681565b6102c061029f3660046113c8565b60056020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161012c565b6101486102e9366004611494565b61082d565b6101486102fc3660046113c8565b610cda565b610309610d15565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b828210156103d65760008481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460ff16151560808401526005015460a08301529083529092019101610360565b50505050905082600014806103eb5750805183115b156103f75790506104c4565b60008367ffffffffffffffff811115610412576104126114ad565b60405190808252806020026020018201604052801561044b57816020015b610438611372565b8152602001906001900390816104305790505b509050600084835161045d91906114d9565b905060005b858110156104bd578361047582846114ec565b81518110610485576104856114ff565b602002602001015183828151811061049f5761049f6114ff565b602002602001018190525080806104b590611515565b915050610462565b5090925050505b92915050565b6104d2610d15565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6006602052816000526040600020818154811061051057600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03909416965091945092909160ff9091169086565b61057c60405180606001604052806000815260200160008152602001600081525090565b506001600160a01b0316600090815260056020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6105c6610d15565b6105d06000610d42565b565b6001600160a01b0382166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b8282101561067d5760008481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460ff16151560808401526005015460a08301529083529092019101610607565b5050505090506000806000835190505b60008111801561069c57508583105b156106fc57836106ad6001836114d9565b815181106106bd576106bd6114ff565b602002602001015160800151156106dc57826106d881611515565b9350505b816106e681611515565b92505080806106f49061152e565b91505061068d565b5060008267ffffffffffffffff811115610718576107186114ad565b60405190808252806020026020018201604052801561075157816020015b61073e611372565b8152602001906001900390816107365790505b50905060008083865161076491906114d9565b90505b85518110801561077657508482105b156107f65785818151811061078d5761078d6114ff565b602002602001015160800151156107e4578581815181106107b0576107b06114ff565b60200260200101518383815181106107ca576107ca6114ff565b602002602001018190525081806107e090611515565b9250505b806107ee81611515565b915050610767565b5090979650505050505050565b61080b610d15565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610835610d92565b600260009054906101000a90046001600160a01b03166001600160a01b03166345945a456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac919061155a565b6108ef5760405162461bcd60e51b815260206004820152600f60248201526e139bc81858dd1a5d99481c9bdd5b99608a1b60448201526064015b60405180910390fd5b6003546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611575565b6001600160a01b0316146109a25760405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1037bbb732b960991b60448201526064016108e6565b6002546040805163a32bf59760e01b815290516000926001600160a01b03169163a32bf5979160048083019260c09291908290030181865afa1580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1091906115a1565b90506000610a1d83610dbc565b90506000610a2c828585610e1b565b336000908152600560205260408120805492935090610a4a83611515565b90915550503360008181526005602081815260408084204260029182018190556006808552838720845160c0810186528981528087018e81528d51828801908152606083018e81528d15156080850190815260a08501888152865460018181018955978f529b909d2094519a90960290930180546001600160a01b039a909a166001600160a01b0319909a1699909917895590519288019290925590519386019390935591516003850155905160048401805491151560ff1990921691909117905593519190920155855190518793927fc57340d4f7608bf773fee1f3e459cc65ebcf386c54cc7472844b7a4142fe511192610b6092889288929193845291151560208401526040830152606082015260800190565b60405180910390a38015610ccb57336000908152600560205260408120600101805491610b8c83611515565b9091555050336000908152600760205260408120805491610bac83611515565b90915550506004805460405163062bcb8d60e11b815233928101929092526001600160a01b031690630c57971a90602401600060405180830381600087803b158015610bf757600080fd5b505af1158015610c0b573d6000803e3d6000fd5b505084516040805186815260208101929092524282820152518793503392507f753244bf3a31bdabae643d3f0b38eefe101e7e80bced1b8a8ef071ff82ab91d99181900360600190a3336000908152600760205260409020546103e811610ccb576004805460405163df49f66360e01b815233928101929092526001600160a01b03169063df49f66390602401600060405180830381600087803b158015610cb257600080fd5b505af1158015610cc6573d6000803e3d6000fd5b505050505b505050610cd760018055565b50565b610ce2610d15565b6001600160a01b038116610d0c57604051631e4fbdf760e01b8152600060048201526024016108e6565b610cd781610d42565b6000546001600160a01b031633146105d05760405163118cdaa760e01b81523360048201526024016108e6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610db557604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000424433845a6040805160208101969096528501939093526bffffffffffffffffffffffff19606092831b16918401919091526074830152609482015260b40160408051601f19818403018152919052805160209091012092915050565b606081015160808201516000918291610e359082906114d9565b610e409060016114ec565b610e4a908761164a565b610e5491906114ec565b90506000610e66828560400151610f10565b905080610e7857600092505050610f09565b600354604080860151905163937a79e960e01b81526000926001600160a01b03169163937a79e991610eae918a91600401611674565b602060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef91906116a6565b90506000610eff6127108961164a565b9190911093505050505b9392505050565b600080826004811115610f2557610f2561165e565b03610f3d57610f3560028461164a565b1590506104c4565b6001826004811115610f5157610f5161165e565b03610f6b57610f6160028461164a565b60011490506104c4565b6002826004811115610f7f57610f7f61165e565b03610f9457610f8d83610fe1565b90506104c4565b6003826004811115610fa857610fa861165e565b03610fb657610f8d83611066565b6004826004811115610fca57610fca61165e565b03610fd857610f8d836110b3565b50600092915050565b60006002821015610ff457506000919050565b8160020361100457506001919050565b61100f60028361164a565b60000361101e57506000919050565b60035b8261102c82806116bf565b1161105d5761103b818461164a565b60000361104b5750600092915050565b6110566002826114ec565b9050611021565b50600192915050565b600080611072836110e5565b905061109981604051806040016040528060038152602001620ccc4d60ea1b8152506111ee565b80610f0957506110ab61013a8461164a565b159392505050565b6000816000036110c557506001919050565b60006110d0836112cd565b9050826110dd82806116bf565b149392505050565b60608160000361110c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611136578061112081611515565b915061112f9050600a836116d6565b9150611110565b60008167ffffffffffffffff811115611151576111516114ad565b6040519080825280601f01601f19166020018201604052801561117b576020820181803683370190505b5090505b84156111e6576111906001836114d9565b915061119d600a8661164a565b6111a89060306114ec565b60f81b8183815181106111bd576111bd6114ff565b60200101906001600160f81b031916908160001a9053506111df600a866116d6565b945061117f565b949350505050565b8151815160009184918491101561120a576000925050506104c4565b60005b8151835161121b91906114d9565b81116112c157600160005b835181101561129a57838181518110611241576112416114ff565b01602001516001600160f81b0319168561125b83866114ec565b8151811061126b5761126b6114ff565b01602001516001600160f81b03191614611288576000915061129a565b8061129281611515565b915050611226565b5080156112ae5760019450505050506104c4565b50806112b981611515565b91505061120d565b50600095945050505050565b6000816000036112df57506000919050565b6001608083901c156112f65760809290921c9160401b5b604083901c1561130b5760409290921c9160201b5b602083901c156113205760209290921c9160101b5b601083901c156113355760109290921c9160081b5b600883901c1561134a5760089290921c9160041b5b600483901c1561135f5760049290921c9160021b5b600283901c156104c45760011b92915050565b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b6001600160a01b0381168114610cd757600080fd5b6000602082840312156113da57600080fd5b8135610f09816113b3565b600080604083850312156113f857600080fd5b8235611403816113b3565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561148757815180516001600160a01b03168552868101518786015285810151868601526060808201519086015260808082015115159086015260a0908101519085015260c0909301929085019060010161142e565b5091979650505050505050565b6000602082840312156114a657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156104c4576104c46114c3565b808201808211156104c4576104c46114c3565b634e487b7160e01b600052603260045260246000fd5b600060018201611527576115276114c3565b5060010190565b60008161153d5761153d6114c3565b506000190190565b8051801515811461155557600080fd5b919050565b60006020828403121561156c57600080fd5b610f0982611545565b60006020828403121561158757600080fd5b8151610f09816113b3565b80516005811061155557600080fd5b600060c082840312156115b357600080fd5b60405160c0810181811067ffffffffffffffff821117156115e457634e487b7160e01b600052604160045260246000fd5b8060405250825181526020830151602082015261160360408401611592565b6040820152606083015160608201526080830151608082015261162860a08401611545565b60a08201529392505050565b634e487b7160e01b600052601260045260246000fd5b60008261165957611659611634565b500690565b634e487b7160e01b600052602160045260246000fd5b828152604081016005831061169957634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6000602082840312156116b857600080fd5b5051919050565b80820281158282048414176104c4576104c46114c3565b6000826116e5576116e5611634565b50049056fea2646970667358221220d5a8de41f7a9446535695e640335328a0354278c5a5e0602333f95c62052d46a64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1991,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4615,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "gameManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(GameManager)3973"
      },
      {
        "astId": 4618,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "minerNFT",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MinerNFT)4601"
      },
      {
        "astId": 4621,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "rewardManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(RewardManager)6268"
      },
      {
        "astId": 4646,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "playerStats",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(PlayerStats)4628_storage)"
      },
      {
        "astId": 4652,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "miningHistory",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(MiningAttempt)4641_storage)dyn_storage)"
      },
      {
        "astId": 4656,
        "contract": "contracts/MiningEngine.sol:MiningEngine",
        "label": "playerTotalSuccesses",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MiningAttempt)4641_storage)dyn_storage": {
        "base": "t_struct(MiningAttempt)4641_storage",
        "encoding": "dynamic_array",
        "label": "struct MiningEngine.MiningAttempt[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameManager)3973": {
        "encoding": "inplace",
        "label": "contract GameManager",
        "numberOfBytes": "20"
      },
      "t_contract(MinerNFT)4601": {
        "encoding": "inplace",
        "label": "contract MinerNFT",
        "numberOfBytes": "20"
      },
      "t_contract(RewardManager)6268": {
        "encoding": "inplace",
        "label": "contract RewardManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(MiningAttempt)4641_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MiningEngine.MiningAttempt[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(MiningAttempt)4641_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(PlayerStats)4628_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MiningEngine.PlayerStats)",
        "numberOfBytes": "32",
        "value": "t_struct(PlayerStats)4628_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MiningAttempt)4641_storage": {
        "encoding": "inplace",
        "label": "struct MiningEngine.MiningAttempt",
        "members": [
          {
            "astId": 4630,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4632,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "nftId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4634,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "roundId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4636,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "randomNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4638,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "success",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 4640,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PlayerStats)4628_storage": {
        "encoding": "inplace",
        "label": "struct MiningEngine.PlayerStats",
        "members": [
          {
            "astId": 4623,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "totalAttempts",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4625,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "totalSuccesses",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4627,
            "contract": "contracts/MiningEngine.sol:MiningEngine",
            "label": "lastMiningTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}