{
  "address": "0x124D4Fc12C8D24BC1b2EE6Bb6a9464a7fB7482F9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolSize",
          "type": "uint256"
        }
      ],
      "name": "AnswerPoolGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GameManagerSimple.PatternType",
          "name": "pattern",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRange",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRange",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "NewRoundStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "RoundEnded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ANSWER_POOL_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUND_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkRoundExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getAnswerPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "enum GameManagerSimple.PatternType",
              "name": "pattern",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "minRange",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRange",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "answerPool",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "answerPoolGenerated",
              "type": "bool"
            }
          ],
          "internalType": "struct GameManagerSimple.Round",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "enum GameManagerSimple.PatternType",
              "name": "pattern",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "minRange",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRange",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "answerPool",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "answerPoolGenerated",
              "type": "bool"
            }
          ],
          "internalType": "struct GameManagerSimple.Round",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoundTimeRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "isAnswerPoolGenerated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRoundActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "enum GameManagerSimple.PatternType",
          "name": "pattern",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minRange",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "answerPoolGenerated",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setRoundDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x558fa971d5b97333926258e49f33eef8788b6c82a3fceffd7204fcc866fb7665",
  "receipt": {
    "to": null,
    "from": "0x038F9EFF208F4cefc0a7f856739a3405c419A147",
    "contractAddress": "0x124D4Fc12C8D24BC1b2EE6Bb6a9464a7fB7482F9",
    "transactionIndex": 7,
    "gasUsed": "10459184",
    "logsBloom": "0x
    "blockHash": "0xcaf96b54edd0f22791f7eab31d2c8a6d47541ab4c58f46a2998f9d95542f76a1",
    "transactionHash": "0x558fa971d5b97333926258e49f33eef8788b6c82a3fceffd7204fcc866fb7665",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 25865268,
        "transactionHash": "0x558fa971d5b97333926258e49f33eef8788b6c82a3fceffd7204fcc866fb7665",
        "address": "0x124D4Fc12C8D24BC1b2EE6Bb6a9464a7fB7482F9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000038f9eff208f4cefc0a7f856739a3405c419a147"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0xcaf96b54edd0f22791f7eab31d2c8a6d47541ab4c58f46a2998f9d95542f76a1"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 25865268,
        "transactionHash": "0x558fa971d5b97333926258e49f33eef8788b6c82a3fceffd7204fcc866fb7665",
        "address": "0x124D4Fc12C8D24BC1b2EE6Bb6a9464a7fB7482F9",
        "topics": [
          "0x4afb164e8b55fde2bc138f047ca800afc30b7bb1e2cff9764868e5b51fed19b9",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c597000000000000000000000000000000000000000000000000000000000001393f000000000000000000000000000000000000000000000000000000006871fa11",
        "logIndex": 22,
        "blockHash": "0xcaf96b54edd0f22791f7eab31d2c8a6d47541ab4c58f46a2998f9d95542f76a1"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 25865268,
        "transactionHash": "0x558fa971d5b97333926258e49f33eef8788b6c82a3fceffd7204fcc866fb7665",
        "address": "0x124D4Fc12C8D24BC1b2EE6Bb6a9464a7fB7482F9",
        "topics": [
          "0x49acbb2f6cf6b5f8d45bf745b9826c6fece211324520a3c8ecc6fe4ff8a9456e",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 23,
        "blockHash": "0xcaf96b54edd0f22791f7eab31d2c8a6d47541ab4c58f46a2998f9d95542f76a1"
      }
    ],
    "blockNumber": 25865268,
    "cumulativeGasUsed": "11886702",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8de372e5c10ab44225136f67a8c03987",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolSize\",\"type\":\"uint256\"}],\"name\":\"AnswerPoolGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GameManagerSimple.PatternType\",\"name\":\"pattern\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"NewRoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANSWER_POOL_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRoundExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswerPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"enum GameManagerSimple.PatternType\",\"name\":\"pattern\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"answerPool\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"answerPoolGenerated\",\"type\":\"bool\"}],\"internalType\":\"struct GameManagerSimple.Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"enum GameManagerSimple.PatternType\",\"name\":\"pattern\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"answerPool\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"answerPoolGenerated\",\"type\":\"bool\"}],\"internalType\":\"struct GameManagerSimple.Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"isAnswerPoolGenerated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRoundActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"enum GameManagerSimple.PatternType\",\"name\":\"pattern\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"answerPoolGenerated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRoundDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameManagerSimple.sol\":\"GameManagerSimple\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/GameManagerSimple.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract GameManagerSimple is Ownable {\\n    enum PatternType {\\n        EVEN, // \\uc9dd\\uc218\\n        ODD, // \\ud640\\uc218\\n        PRIME, // \\uc18c\\uc218\\n        PI, // \\u03c0 \\uad00\\ub828 (314 \\ud3ec\\ud568/\\ubc30\\uc218)\\n        SQUARE // \\uc644\\uc804\\uc81c\\uacf1\\uc218\\n    }\\n\\n    struct Round {\\n        uint256 roundId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        PatternType pattern;\\n        uint256 minRange;\\n        uint256 maxRange;\\n        bool isActive;\\n        uint256[] answerPool; // \\uc815\\ub2f5 \\ub09c\\uc218 \\ud480\\n        bool answerPoolGenerated; // \\uc815\\ub2f5 \\ud480 \\uc0dd\\uc131 \\uc644\\ub8cc \\uc5ec\\ubd80\\n    }\\n\\n    uint256 public currentRoundId;\\n    uint256 public constant ROUND_DURATION = 600; // 10\\ubd84\\n    uint256 public constant ANSWER_POOL_SIZE = 100; // \\uc815\\ub2f5 \\ud480 \\ud06c\\uae30\\n    \\n    mapping(uint256 => Round) public rounds;\\n\\n    event NewRoundStarted(\\n        uint256 indexed roundId,\\n        PatternType pattern,\\n        uint256 minRange,\\n        uint256 maxRange,\\n        uint256 startTime\\n    );\\n\\n    event RoundEnded(uint256 indexed roundId, uint256 endTime);\\n    \\n    event AnswerPoolGenerated(uint256 indexed roundId, uint256 poolSize);\\n\\n    constructor() Ownable(msg.sender) {\\n        _startNewRound();\\n    }\\n\\n    function _startNewRound() internal {\\n        // \\uc774\\uc804 \\ub77c\\uc6b4\\ub4dc \\uc885\\ub8cc\\n        if (currentRoundId > 0) {\\n            rounds[currentRoundId].isActive = false;\\n            rounds[currentRoundId].endTime = block.timestamp;\\n            emit RoundEnded(currentRoundId, block.timestamp);\\n        }\\n\\n        currentRoundId++;\\n        \\n        // \\uc0c8 \\ub77c\\uc6b4\\ub4dc \\uc124\\uc815 \\uc0dd\\uc131\\n        (PatternType pattern, uint256 minRange, uint256 maxRange) = _generateRoundSettings();\\n        \\n        rounds[currentRoundId] = Round({\\n            roundId: currentRoundId,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + ROUND_DURATION,\\n            pattern: pattern,\\n            minRange: minRange,\\n            maxRange: maxRange,\\n            isActive: true,\\n            answerPool: new uint256[](0),\\n            answerPoolGenerated: false\\n        });\\n\\n        emit NewRoundStarted(currentRoundId, pattern, minRange, maxRange, block.timestamp);\\n        \\n        // \\uc815\\ub2f5 \\ud480 \\uc989\\uc2dc \\uc0dd\\uc131 (Simple \\ubc84\\uc804)\\n        _generateAnswerPoolSimple(currentRoundId);\\n    }\\n\\n    function _generateRoundSettings() internal view returns (PatternType, uint256, uint256) {\\n        // \\uc720\\uc0ac \\ub79c\\ub364\\uac12 \\uc0dd\\uc131 (\\ube14\\ub85d \\ub370\\uc774\\ud130 \\uae30\\ubc18)\\n        uint256 randomValue = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, blockhash(block.number - 1), currentRoundId))\\n        );\\n        \\n        // \\ud328\\ud134 \\uc120\\ud0dd (5\\uac00\\uc9c0 \\uc911 \\ud558\\ub098)\\n        PatternType pattern = PatternType(randomValue % 5);\\n        \\n        // \\ubc94\\uc704 \\uc124\\uc815\\n        uint256 baseMin = 30000 + (randomValue % 20000); // 30000-50000\\n        uint256 baseMax = 60000 + (randomValue % 20000); // 60000-80000\\n        \\n        // \\ud328\\ud134\\ubcc4 \\uc870\\uc815\\n        uint256 minRange = baseMin + ((randomValue / 100) % 10000);\\n        uint256 maxRange = baseMax + ((randomValue / 1000) % 10000);\\n        \\n        return (pattern, minRange, maxRange);\\n    }\\n\\n    function _generateAnswerPoolSimple(uint256 roundId) internal {\\n        Round storage round = rounds[roundId];\\n        \\n        // \\uc758\\uc0ac \\ub79c\\ub364 \\uc2dc\\ub4dc\\n        uint256 seed = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, block.prevrandao, roundId, msg.sender))\\n        );\\n        \\n        uint256 generated = 0;\\n        uint256 attempts = 0;\\n        uint256 maxAttempts = (round.maxRange - round.minRange + 1) * 2; // \\ucda9\\ubd84\\ud55c \\uc2dc\\ub3c4 \\ud69f\\uc218\\n        \\n        while (generated < ANSWER_POOL_SIZE && attempts < maxAttempts) {\\n            uint256 randomNum = uint256(\\n                keccak256(abi.encodePacked(seed, attempts, generated))\\n            );\\n            \\n            uint256 candidate = round.minRange + (randomNum % (round.maxRange - round.minRange + 1));\\n            \\n            if (_checkPattern(candidate, round.pattern)) {\\n                round.answerPool.push(candidate);\\n                generated++;\\n            }\\n            \\n            attempts++;\\n        }\\n        \\n        round.answerPoolGenerated = true;\\n        emit AnswerPoolGenerated(roundId, round.answerPool.length);\\n    }\\n\\n    function _checkPattern(uint256 number, PatternType pattern) internal pure returns (bool) {\\n        if (pattern == PatternType.EVEN) {\\n            return number % 2 == 0;\\n        } else if (pattern == PatternType.ODD) {\\n            return number % 2 == 1;\\n        } else if (pattern == PatternType.PRIME) {\\n            return _isPrime(number);\\n        } else if (pattern == PatternType.PI) {\\n            return _isPiRelated(number);\\n        } else if (pattern == PatternType.SQUARE) {\\n            return _isPerfectSquare(number);\\n        }\\n        return false;\\n    }\\n\\n    function _isPrime(uint256 n) internal pure returns (bool) {\\n        if (n < 2) return false;\\n        if (n == 2) return true;\\n        if (n % 2 == 0) return false;\\n        \\n        for (uint256 i = 3; i * i <= n; i += 2) {\\n            if (n % i == 0) return false;\\n        }\\n        return true;\\n    }\\n\\n    function _isPiRelated(uint256 n) internal pure returns (bool) {\\n        // 314\\ub97c \\ud3ec\\ud568\\ud558\\uac70\\ub098 314\\uc758 \\ubc30\\uc218\\n        string memory numStr = _toString(n);\\n        return _contains(numStr, \\\"314\\\") || n % 314 == 0;\\n    }\\n\\n    function _isPerfectSquare(uint256 n) internal pure returns (bool) {\\n        if (n == 0) return true;\\n        uint256 sqrt = _sqrt(n);\\n        return sqrt * sqrt == n;\\n    }\\n\\n    function _sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 result = 1;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n        return result;\\n    }\\n\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function _contains(string memory str, string memory substr) internal pure returns (bool) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory substrBytes = bytes(substr);\\n        \\n        if (substrBytes.length > strBytes.length) return false;\\n        \\n        for (uint256 i = 0; i <= strBytes.length - substrBytes.length; i++) {\\n            bool found = true;\\n            for (uint256 j = 0; j < substrBytes.length; j++) {\\n                if (strBytes[i + j] != substrBytes[j]) {\\n                    found = false;\\n                    break;\\n                }\\n            }\\n            if (found) return true;\\n        }\\n        return false;\\n    }\\n\\n    // Public functions\\n    function getCurrentRound() external view returns (Round memory) {\\n        return rounds[currentRoundId];\\n    }\\n\\n    function getRound(uint256 roundId) external view returns (Round memory) {\\n        return rounds[roundId];\\n    }\\n\\n    function isRoundActive() external view returns (bool) {\\n        return rounds[currentRoundId].isActive && block.timestamp < rounds[currentRoundId].endTime;\\n    }\\n\\n    function getRoundTimeRemaining() external view returns (uint256) {\\n        if (!rounds[currentRoundId].isActive) return 0;\\n        if (block.timestamp >= rounds[currentRoundId].endTime) return 0;\\n        return rounds[currentRoundId].endTime - block.timestamp;\\n    }\\n\\n    function getAnswerPool(uint256 roundId) external view returns (uint256[] memory) {\\n        return rounds[roundId].answerPool;\\n    }\\n\\n    function isAnswerPoolGenerated(uint256 roundId) external view returns (bool) {\\n        return rounds[roundId].answerPoolGenerated;\\n    }\\n\\n    function checkRoundExpiry() external {\\n        if (rounds[currentRoundId].isActive && block.timestamp >= rounds[currentRoundId].endTime) {\\n            _startNewRound();\\n        }\\n    }\\n\\n    // Admin functions\\n    function forceNewRound() external onlyOwner {\\n        _startNewRound();\\n    }\\n\\n    function setRoundDuration(uint256 _duration) external onlyOwner {\\n        // Note: This would need to be implemented if we want dynamic durations\\n        // For now, ROUND_DURATION is constant\\n    }\\n}\",\"keccak256\":\"0x37a9ceb4a2b6b9c582c84854eb6517dc193fcb14b8986fcb4f7f4acc12711448\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4771,
        "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
        "label": "currentRoundId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4782,
        "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
        "label": "rounds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Round)4769_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(PatternType)4748": {
        "encoding": "inplace",
        "label": "enum GameManagerSimple.PatternType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Round)4769_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GameManagerSimple.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)4769_storage"
      },
      "t_struct(Round)4769_storage": {
        "encoding": "inplace",
        "label": "struct GameManagerSimple.Round",
        "members": [
          {
            "astId": 4750,
            "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
            "label": "roundId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4752,
            "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4754,
            "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4757,
            "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
            "label": "pattern",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(PatternType)4748"
          },
          {
            "astId": 4759,
            "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
            "label": "minRange",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4761,
            "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
            "label": "maxRange",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4763,
            "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
            "label": "isActive",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4766,
            "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
            "label": "answerPool",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4768,
            "contract": "contracts/GameManagerSimple.sol:GameManagerSimple",
            "label": "answerPoolGenerated",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}